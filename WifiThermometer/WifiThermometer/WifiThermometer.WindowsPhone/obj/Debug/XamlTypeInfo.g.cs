//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace WifiThermometer
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[108];
            _typeNameTable[0] = "Telerik.UI.Xaml.Controls.Chart.RadCartesianChart";
            _typeNameTable[1] = "Telerik.UI.Xaml.Controls.Chart.RadChartBase";
            _typeNameTable[2] = "Telerik.UI.Xaml.Controls.Chart.PresenterBase";
            _typeNameTable[3] = "Telerik.UI.Xaml.Controls.RadControl";
            _typeNameTable[4] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[5] = "Telerik.UI.Xaml.Controls.Chart.CartesianSeriesCollection";
            _typeNameTable[6] = "Telerik.UI.Xaml.Controls.Chart.PresenterCollection`1<Telerik.UI.Xaml.Controls.Chart.CartesianSeries>";
            _typeNameTable[7] = "System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.CartesianSeries>";
            _typeNameTable[8] = "Object";
            _typeNameTable[9] = "Telerik.UI.Xaml.Controls.Chart.CartesianSeries";
            _typeNameTable[10] = "Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries";
            _typeNameTable[11] = "Telerik.UI.Xaml.Controls.Chart.ChartSeries";
            _typeNameTable[12] = "Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter";
            _typeNameTable[13] = "Telerik.UI.Xaml.Controls.Chart.CartesianAxis";
            _typeNameTable[14] = "Telerik.UI.Xaml.Controls.Chart.LineAxis";
            _typeNameTable[15] = "Telerik.UI.Xaml.Controls.Chart.Axis";
            _typeNameTable[16] = "Windows.UI.Xaml.Style";
            _typeNameTable[17] = "Windows.UI.Xaml.DataTemplate";
            _typeNameTable[18] = "Windows.UI.Xaml.Controls.DataTemplateSelector";
            _typeNameTable[19] = "System.Collections.ObjectModel.ObservableCollection`1<Windows.UI.Xaml.DataTemplate>";
            _typeNameTable[20] = "System.Collections.ObjectModel.Collection`1<Windows.UI.Xaml.DataTemplate>";
            _typeNameTable[21] = "String";
            _typeNameTable[22] = "Boolean";
            _typeNameTable[23] = "Int32";
            _typeNameTable[24] = "System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>";
            _typeNameTable[25] = "System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>";
            _typeNameTable[26] = "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition";
            _typeNameTable[27] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[28] = "Telerik.UI.Xaml.Controls.Chart.DataPointBinding";
            _typeNameTable[29] = "Windows.UI.Xaml.Thickness";
            _typeNameTable[30] = "Windows.UI.Xaml.HorizontalAlignment";
            _typeNameTable[31] = "Windows.UI.Xaml.VerticalAlignment";
            _typeNameTable[32] = "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelStrategy";
            _typeNameTable[33] = "System.Collections.IEnumerable";
            _typeNameTable[34] = "Telerik.UI.Xaml.Controls.Chart.IndicatorCollection";
            _typeNameTable[35] = "Telerik.UI.Xaml.Controls.Chart.PresenterCollection`1<Telerik.UI.Xaml.Controls.Chart.IndicatorBase>";
            _typeNameTable[36] = "System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.IndicatorBase>";
            _typeNameTable[37] = "Telerik.UI.Xaml.Controls.Chart.IndicatorBase";
            _typeNameTable[38] = "Telerik.Charting.DataPointCollection`1<Telerik.Charting.CategoricalDataPoint>";
            _typeNameTable[39] = "Telerik.Core.ElementCollection`1<Telerik.Charting.CategoricalDataPoint>";
            _typeNameTable[40] = "System.Collections.ObjectModel.Collection`1<Telerik.Charting.CategoricalDataPoint>";
            _typeNameTable[41] = "Telerik.Charting.CategoricalDataPoint";
            _typeNameTable[42] = "Telerik.Charting.CategoricalDataPointBase";
            _typeNameTable[43] = "Telerik.Charting.DataPoint";
            _typeNameTable[44] = "Telerik.Core.Node";
            _typeNameTable[45] = "Telerik.Core.PropertyBagObject";
            _typeNameTable[46] = "Double";
            _typeNameTable[47] = "Telerik.Core.IElementPresenter";
            _typeNameTable[48] = "Telerik.Core.NodeState";
            _typeNameTable[49] = "System.Enum";
            _typeNameTable[50] = "System.ValueType";
            _typeNameTable[51] = "Telerik.Core.RadRect";
            _typeNameTable[52] = "Telerik.Core.Element";
            _typeNameTable[53] = "Telerik.UI.Xaml.Controls.Chart.CartesianAnnotationCollection";
            _typeNameTable[54] = "Telerik.UI.Xaml.Controls.Chart.PresenterCollection`1<Telerik.UI.Xaml.Controls.Chart.CartesianChartAnnotation>";
            _typeNameTable[55] = "System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.CartesianChartAnnotation>";
            _typeNameTable[56] = "Telerik.UI.Xaml.Controls.Chart.CartesianChartAnnotation";
            _typeNameTable[57] = "Telerik.UI.Xaml.Controls.Chart.ChartAnnotation";
            _typeNameTable[58] = "Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid";
            _typeNameTable[59] = "Telerik.UI.Xaml.Controls.Chart.ChartGrid";
            _typeNameTable[60] = "Telerik.UI.Xaml.Controls.Chart.ChartSeriesProvider";
            _typeNameTable[61] = "Telerik.UI.Xaml.Controls.Chart.ChartPalette";
            _typeNameTable[62] = "Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName";
            _typeNameTable[63] = "Telerik.UI.Xaml.Controls.Chart.ChartBehaviorCollection";
            _typeNameTable[64] = "System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.ChartBehavior>";
            _typeNameTable[65] = "Telerik.UI.Xaml.Controls.Chart.ChartBehavior";
            _typeNameTable[66] = "Windows.Foundation.Size";
            _typeNameTable[67] = "Windows.Foundation.Point";
            _typeNameTable[68] = "Telerik.UI.Xaml.Controls.Chart.CategoricalAxis";
            _typeNameTable[69] = "Telerik.Charting.AxisPlotMode";
            _typeNameTable[70] = "Telerik.Charting.AxisHorizontalLocation";
            _typeNameTable[71] = "Telerik.Charting.AxisVerticalLocation";
            _typeNameTable[72] = "Telerik.Charting.IContentFormatter";
            _typeNameTable[73] = "Telerik.Charting.AxisLastLabelVisibility";
            _typeNameTable[74] = "Telerik.Charting.AxisLabelFitMode";
            _typeNameTable[75] = "Telerik.UI.Xaml.Controls.Chart.LinearAxis";
            _typeNameTable[76] = "Telerik.UI.Xaml.Controls.Chart.NumericalAxis";
            _typeNameTable[77] = "Telerik.Charting.NumericalAxisRangeExtendDirection";
            _typeNameTable[78] = "Telerik.Core.ValueRange`1<Double>";
            _typeNameTable[79] = "Telerik.UI.Xaml.Controls.Chart.LineSeries";
            _typeNameTable[80] = "Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries";
            _typeNameTable[81] = "Telerik.UI.Xaml.Controls.Chart.CategoricalSeries";
            _typeNameTable[82] = "Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase";
            _typeNameTable[83] = "Windows.UI.Xaml.Media.Brush";
            _typeNameTable[84] = "Windows.UI.Xaml.Media.DoubleCollection";
            _typeNameTable[85] = "Windows.UI.Xaml.Media.PenLineJoin";
            _typeNameTable[86] = "Telerik.Charting.ChartSeriesCombineMode";
            _typeNameTable[87] = "Telerik.UI.Xaml.Controls.Chart.PropertyNameDataPointBinding";
            _typeNameTable[88] = "WifiThermometer.MainPage";
            _typeNameTable[89] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[90] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[91] = "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition";
            _typeNameTable[92] = "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation";
            _typeNameTable[93] = "Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection";
            _typeNameTable[94] = "System.Collections.Generic.List`1<Windows.UI.Xaml.Media.Brush>";
            _typeNameTable[95] = "Telerik.UI.Xaml.Controls.Data.HexView.AngledHexLayoutDefinition";
            _typeNameTable[96] = "Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase";
            _typeNameTable[97] = "Windows.UI.Xaml.Controls.Orientation";
            _typeNameTable[98] = "Telerik.UI.Xaml.Controls.Data.HexView.FlatLooseHexLayoutDefinition";
            _typeNameTable[99] = "Telerik.UI.Xaml.Controls.Data.HexView.FlatTightHexLayoutDefinition";
            _typeNameTable[100] = "Telerik.UI.Xaml.Controls.Input.HighlightStyle";
            _typeNameTable[101] = "Windows.UI.Xaml.Media.FontFamily";
            _typeNameTable[102] = "Telerik.UI.Xaml.Controls.Input.FontWeightName";
            _typeNameTable[103] = "Windows.UI.Text.FontStyle";
            _typeNameTable[104] = "Telerik.UI.Xaml.Controls.Input.CalendarCellStyle";
            _typeNameTable[105] = "Telerik.UI.Xaml.Controls.Primitives.BusyIndicator.BusyIndicatorAnimationAdapter";
            _typeNameTable[106] = "Windows.UI.Xaml.FrameworkElement";
            _typeNameTable[107] = "Windows.UI.Xaml.Media.Animation.Storyboard";

            _typeTable = new global::System.Type[108];
            _typeTable[0] = typeof(global::Telerik.UI.Xaml.Controls.Chart.RadCartesianChart);
            _typeTable[1] = typeof(global::Telerik.UI.Xaml.Controls.Chart.RadChartBase);
            _typeTable[2] = typeof(global::Telerik.UI.Xaml.Controls.Chart.PresenterBase);
            _typeTable[3] = typeof(global::Telerik.UI.Xaml.Controls.RadControl);
            _typeTable[4] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[5] = typeof(global::Telerik.UI.Xaml.Controls.Chart.CartesianSeriesCollection);
            _typeTable[6] = typeof(global::Telerik.UI.Xaml.Controls.Chart.PresenterCollection<global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries>);
            _typeTable[7] = typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries>);
            _typeTable[8] = typeof(global::System.Object);
            _typeTable[9] = typeof(global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries);
            _typeTable[10] = typeof(global::Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries);
            _typeTable[11] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartSeries);
            _typeTable[12] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter);
            _typeTable[13] = typeof(global::Telerik.UI.Xaml.Controls.Chart.CartesianAxis);
            _typeTable[14] = typeof(global::Telerik.UI.Xaml.Controls.Chart.LineAxis);
            _typeTable[15] = typeof(global::Telerik.UI.Xaml.Controls.Chart.Axis);
            _typeTable[16] = typeof(global::Windows.UI.Xaml.Style);
            _typeTable[17] = typeof(global::Windows.UI.Xaml.DataTemplate);
            _typeTable[18] = typeof(global::Windows.UI.Xaml.Controls.DataTemplateSelector);
            _typeTable[19] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Windows.UI.Xaml.DataTemplate>);
            _typeTable[20] = typeof(global::System.Collections.ObjectModel.Collection<global::Windows.UI.Xaml.DataTemplate>);
            _typeTable[21] = typeof(global::System.String);
            _typeTable[22] = typeof(global::System.Boolean);
            _typeTable[23] = typeof(global::System.Int32);
            _typeTable[24] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>);
            _typeTable[25] = typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>);
            _typeTable[26] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition);
            _typeTable[27] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[28] = typeof(global::Telerik.UI.Xaml.Controls.Chart.DataPointBinding);
            _typeTable[29] = typeof(global::Windows.UI.Xaml.Thickness);
            _typeTable[30] = typeof(global::Windows.UI.Xaml.HorizontalAlignment);
            _typeTable[31] = typeof(global::Windows.UI.Xaml.VerticalAlignment);
            _typeTable[32] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelStrategy);
            _typeTable[33] = typeof(global::System.Collections.IEnumerable);
            _typeTable[34] = typeof(global::Telerik.UI.Xaml.Controls.Chart.IndicatorCollection);
            _typeTable[35] = typeof(global::Telerik.UI.Xaml.Controls.Chart.PresenterCollection<global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase>);
            _typeTable[36] = typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase>);
            _typeTable[37] = typeof(global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase);
            _typeTable[38] = typeof(global::Telerik.Charting.DataPointCollection<global::Telerik.Charting.CategoricalDataPoint>);
            _typeTable[39] = typeof(global::Telerik.Core.ElementCollection<global::Telerik.Charting.CategoricalDataPoint>);
            _typeTable[40] = typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.Charting.CategoricalDataPoint>);
            _typeTable[41] = typeof(global::Telerik.Charting.CategoricalDataPoint);
            _typeTable[42] = typeof(global::Telerik.Charting.CategoricalDataPointBase);
            _typeTable[43] = typeof(global::Telerik.Charting.DataPoint);
            _typeTable[44] = typeof(global::Telerik.Core.Node);
            _typeTable[45] = typeof(global::Telerik.Core.PropertyBagObject);
            _typeTable[46] = typeof(global::System.Double);
            _typeTable[47] = typeof(global::Telerik.Core.IElementPresenter);
            _typeTable[48] = typeof(global::Telerik.Core.NodeState);
            _typeTable[49] = typeof(global::System.Enum);
            _typeTable[50] = typeof(global::System.ValueType);
            _typeTable[51] = typeof(global::Telerik.Core.RadRect);
            _typeTable[52] = typeof(global::Telerik.Core.Element);
            _typeTable[53] = typeof(global::Telerik.UI.Xaml.Controls.Chart.CartesianAnnotationCollection);
            _typeTable[54] = typeof(global::Telerik.UI.Xaml.Controls.Chart.PresenterCollection<global::Telerik.UI.Xaml.Controls.Chart.CartesianChartAnnotation>);
            _typeTable[55] = typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.CartesianChartAnnotation>);
            _typeTable[56] = typeof(global::Telerik.UI.Xaml.Controls.Chart.CartesianChartAnnotation);
            _typeTable[57] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotation);
            _typeTable[58] = typeof(global::Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid);
            _typeTable[59] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartGrid);
            _typeTable[60] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesProvider);
            _typeTable[61] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartPalette);
            _typeTable[62] = typeof(global::Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName);
            _typeTable[63] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartBehaviorCollection);
            _typeTable[64] = typeof(global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.ChartBehavior>);
            _typeTable[65] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartBehavior);
            _typeTable[66] = typeof(global::Windows.Foundation.Size);
            _typeTable[67] = typeof(global::Windows.Foundation.Point);
            _typeTable[68] = typeof(global::Telerik.UI.Xaml.Controls.Chart.CategoricalAxis);
            _typeTable[69] = typeof(global::Telerik.Charting.AxisPlotMode);
            _typeTable[70] = typeof(global::Telerik.Charting.AxisHorizontalLocation);
            _typeTable[71] = typeof(global::Telerik.Charting.AxisVerticalLocation);
            _typeTable[72] = typeof(global::Telerik.Charting.IContentFormatter);
            _typeTable[73] = typeof(global::Telerik.Charting.AxisLastLabelVisibility);
            _typeTable[74] = typeof(global::Telerik.Charting.AxisLabelFitMode);
            _typeTable[75] = typeof(global::Telerik.UI.Xaml.Controls.Chart.LinearAxis);
            _typeTable[76] = typeof(global::Telerik.UI.Xaml.Controls.Chart.NumericalAxis);
            _typeTable[77] = typeof(global::Telerik.Charting.NumericalAxisRangeExtendDirection);
            _typeTable[78] = typeof(global::Telerik.Core.ValueRange<global::System.Double>);
            _typeTable[79] = typeof(global::Telerik.UI.Xaml.Controls.Chart.LineSeries);
            _typeTable[80] = typeof(global::Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries);
            _typeTable[81] = typeof(global::Telerik.UI.Xaml.Controls.Chart.CategoricalSeries);
            _typeTable[82] = typeof(global::Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase);
            _typeTable[83] = typeof(global::Windows.UI.Xaml.Media.Brush);
            _typeTable[84] = typeof(global::Windows.UI.Xaml.Media.DoubleCollection);
            _typeTable[85] = typeof(global::Windows.UI.Xaml.Media.PenLineJoin);
            _typeTable[86] = typeof(global::Telerik.Charting.ChartSeriesCombineMode);
            _typeTable[87] = typeof(global::Telerik.UI.Xaml.Controls.Chart.PropertyNameDataPointBinding);
            _typeTable[88] = typeof(global::WifiThermometer.MainPage);
            _typeTable[89] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[90] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[91] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition);
            _typeTable[92] = typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation);
            _typeTable[93] = typeof(global::Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection);
            _typeTable[94] = typeof(global::System.Collections.Generic.List<global::Windows.UI.Xaml.Media.Brush>);
            _typeTable[95] = typeof(global::Telerik.UI.Xaml.Controls.Data.HexView.AngledHexLayoutDefinition);
            _typeTable[96] = typeof(global::Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase);
            _typeTable[97] = typeof(global::Windows.UI.Xaml.Controls.Orientation);
            _typeTable[98] = typeof(global::Telerik.UI.Xaml.Controls.Data.HexView.FlatLooseHexLayoutDefinition);
            _typeTable[99] = typeof(global::Telerik.UI.Xaml.Controls.Data.HexView.FlatTightHexLayoutDefinition);
            _typeTable[100] = typeof(global::Telerik.UI.Xaml.Controls.Input.HighlightStyle);
            _typeTable[101] = typeof(global::Windows.UI.Xaml.Media.FontFamily);
            _typeTable[102] = typeof(global::Telerik.UI.Xaml.Controls.Input.FontWeightName);
            _typeTable[103] = typeof(global::Windows.UI.Text.FontStyle);
            _typeTable[104] = typeof(global::Telerik.UI.Xaml.Controls.Input.CalendarCellStyle);
            _typeTable[105] = typeof(global::Telerik.UI.Xaml.Controls.Primitives.BusyIndicator.BusyIndicatorAnimationAdapter);
            _typeTable[106] = typeof(global::Windows.UI.Xaml.FrameworkElement);
            _typeTable[107] = typeof(global::Windows.UI.Xaml.Media.Animation.Storyboard);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_RadCartesianChart() { return new global::Telerik.UI.Xaml.Controls.Chart.RadCartesianChart(); }
        private object Activate_7_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries>(); }
        private object Activate_19_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Windows.UI.Xaml.DataTemplate>(); }
        private object Activate_20_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Windows.UI.Xaml.DataTemplate>(); }
        private object Activate_24_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>(); }
        private object Activate_25_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>(); }
        private object Activate_26_ChartSeriesLabelDefinition() { return new global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition(); }
        private object Activate_36_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase>(); }
        private object Activate_40_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Telerik.Charting.CategoricalDataPoint>(); }
        private object Activate_41_CategoricalDataPoint() { return new global::Telerik.Charting.CategoricalDataPoint(); }
        private object Activate_55_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.CartesianChartAnnotation>(); }
        private object Activate_58_CartesianChartGrid() { return new global::Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid(); }
        private object Activate_60_ChartSeriesProvider() { return new global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesProvider(); }
        private object Activate_61_ChartPalette() { return new global::Telerik.UI.Xaml.Controls.Chart.ChartPalette(); }
        private object Activate_64_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Telerik.UI.Xaml.Controls.Chart.ChartBehavior>(); }
        private object Activate_68_CategoricalAxis() { return new global::Telerik.UI.Xaml.Controls.Chart.CategoricalAxis(); }
        private object Activate_75_LinearAxis() { return new global::Telerik.UI.Xaml.Controls.Chart.LinearAxis(); }
        private object Activate_79_LineSeries() { return new global::Telerik.UI.Xaml.Controls.Chart.LineSeries(); }
        private object Activate_87_PropertyNameDataPointBinding() { return new global::Telerik.UI.Xaml.Controls.Chart.PropertyNameDataPointBinding(); }
        private object Activate_88_MainPage() { return new global::WifiThermometer.MainPage(); }
        private object Activate_91_ChartAnnotationLabelDefinition() { return new global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition(); }
        private object Activate_93_PaletteEntryCollection() { return new global::Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection(); }
        private object Activate_94_List() { return new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Media.Brush>(); }
        private object Activate_95_AngledHexLayoutDefinition() { return new global::Telerik.UI.Xaml.Controls.Data.HexView.AngledHexLayoutDefinition(); }
        private object Activate_98_FlatLooseHexLayoutDefinition() { return new global::Telerik.UI.Xaml.Controls.Data.HexView.FlatLooseHexLayoutDefinition(); }
        private object Activate_99_FlatTightHexLayoutDefinition() { return new global::Telerik.UI.Xaml.Controls.Data.HexView.FlatTightHexLayoutDefinition(); }
        private object Activate_100_HighlightStyle() { return new global::Telerik.UI.Xaml.Controls.Input.HighlightStyle(); }
        private object Activate_104_CalendarCellStyle() { return new global::Telerik.UI.Xaml.Controls.Input.CalendarCellStyle(); }
        private object Activate_105_BusyIndicatorAnimationAdapter() { return new global::Telerik.UI.Xaml.Controls.Primitives.BusyIndicator.BusyIndicatorAnimationAdapter(); }
        private void VectorAdd_5_CartesianSeriesCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries)item;
            collection.Add(newItem);
        }
        private void VectorAdd_6_PresenterCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries)item;
            collection.Add(newItem);
        }
        private void VectorAdd_7_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries)item;
            collection.Add(newItem);
        }
        private void VectorAdd_19_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DataTemplate>)instance;
            var newItem = (global::Windows.UI.Xaml.DataTemplate)item;
            collection.Add(newItem);
        }
        private void VectorAdd_20_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DataTemplate>)instance;
            var newItem = (global::Windows.UI.Xaml.DataTemplate)item;
            collection.Add(newItem);
        }
        private void VectorAdd_24_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)item;
            collection.Add(newItem);
        }
        private void VectorAdd_25_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)item;
            collection.Add(newItem);
        }
        private void VectorAdd_34_IndicatorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_35_PresenterCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_36_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_38_DataPointCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.Charting.CategoricalDataPoint>)instance;
            var newItem = (global::Telerik.Charting.CategoricalDataPoint)item;
            collection.Add(newItem);
        }
        private void VectorAdd_39_ElementCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.Charting.CategoricalDataPoint>)instance;
            var newItem = (global::Telerik.Charting.CategoricalDataPoint)item;
            collection.Add(newItem);
        }
        private void VectorAdd_40_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.Charting.CategoricalDataPoint>)instance;
            var newItem = (global::Telerik.Charting.CategoricalDataPoint)item;
            collection.Add(newItem);
        }
        private void VectorAdd_53_CartesianAnnotationCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.CartesianChartAnnotation>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.CartesianChartAnnotation)item;
            collection.Add(newItem);
        }
        private void VectorAdd_54_PresenterCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.CartesianChartAnnotation>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.CartesianChartAnnotation)item;
            collection.Add(newItem);
        }
        private void VectorAdd_55_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.CartesianChartAnnotation>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.CartesianChartAnnotation)item;
            collection.Add(newItem);
        }
        private void VectorAdd_63_ChartBehaviorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.ChartBehavior>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.ChartBehavior)item;
            collection.Add(newItem);
        }
        private void VectorAdd_64_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Telerik.UI.Xaml.Controls.Chart.ChartBehavior>)instance;
            var newItem = (global::Telerik.UI.Xaml.Controls.Chart.ChartBehavior)item;
            collection.Add(newItem);
        }
        private void VectorAdd_94_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.Media.Brush>)instance;
            var newItem = (global::Windows.UI.Xaml.Media.Brush)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Telerik.UI.Xaml.Controls.Chart.RadCartesianChart
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase"));
                userType.Activator = Activate_0_RadCartesianChart;
                userType.SetContentPropertyName("Telerik.UI.Xaml.Controls.Chart.RadCartesianChart.Series");
                userType.AddMemberName("Series");
                userType.AddMemberName("HorizontalAxis");
                userType.AddMemberName("VerticalAxis");
                userType.AddMemberName("Indicators");
                userType.AddMemberName("Annotations");
                userType.AddMemberName("Grid");
                xamlType = userType;
                break;

            case 1:   //  Telerik.UI.Xaml.Controls.Chart.RadChartBase
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PresenterBase"));
                userType.AddMemberName("SeriesProvider");
                userType.AddMemberName("ClipToBounds");
                userType.AddMemberName("EmptyContent");
                userType.AddMemberName("EmptyContentTemplate");
                userType.AddMemberName("PlotAreaStyle");
                userType.AddMemberName("Palette");
                userType.AddMemberName("PaletteName");
                userType.AddMemberName("SelectionPalette");
                userType.AddMemberName("SelectionPaletteName");
                userType.AddMemberName("Behaviors");
                userType.AddMemberName("Zoom");
                userType.AddMemberName("MaxZoom");
                userType.AddMemberName("MinZoom");
                userType.AddMemberName("PlotOrigin");
                userType.AddMemberName("PlotAreaClip");
                userType.AddMemberName("ScrollOffset");
                xamlType = userType;
                break;

            case 2:   //  Telerik.UI.Xaml.Controls.Chart.PresenterBase
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadControl"));
                xamlType = userType;
                break;

            case 3:   //  Telerik.UI.Xaml.Controls.RadControl
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.AddMemberName("CurrentVisualState");
                xamlType = userType;
                break;

            case 4:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  Telerik.UI.Xaml.Controls.Chart.CartesianSeriesCollection
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PresenterCollection`1<Telerik.UI.Xaml.Controls.Chart.CartesianSeries>"));
                userType.CollectionAdd = VectorAdd_5_CartesianSeriesCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 6:   //  Telerik.UI.Xaml.Controls.Chart.PresenterCollection`1<Telerik.UI.Xaml.Controls.Chart.CartesianSeries>
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.CartesianSeries>"));
                userType.CollectionAdd = VectorAdd_6_PresenterCollection;
                xamlType = userType;
                break;

            case 7:   //  System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.CartesianSeries>
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_7_Collection;
                userType.CollectionAdd = VectorAdd_7_Collection;
                xamlType = userType;
                break;

            case 8:   //  Object
                xamlType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 9:   //  Telerik.UI.Xaml.Controls.Chart.CartesianSeries
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries"));
                userType.AddMemberName("HorizontalAxis");
                userType.AddMemberName("VerticalAxis");
                xamlType = userType;
                break;

            case 10:   //  Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries"));
                userType.AddMemberName("DefaultVisualStyle");
                userType.AddMemberName("PointTemplate");
                userType.AddMemberName("PointTemplateSelector");
                userType.AddMemberName("PointTemplates");
                userType.AddMemberName("LegendTitle");
                userType.AddMemberName("IsVisibleInLegend");
                xamlType = userType;
                break;

            case 11:   //  Telerik.UI.Xaml.Controls.Chart.ChartSeries
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter"));
                userType.AddMemberName("IsSelected");
                userType.AddMemberName("AllowSelect");
                userType.AddMemberName("PaletteIndex");
                userType.AddMemberName("LabelDefinitions");
                userType.AddMemberName("IsSelectedBinding");
                userType.AddMemberName("ShowLabels");
                userType.AddMemberName("DisplayName");
                userType.AddMemberName("ClipToPlotArea");
                userType.AddMemberName("ItemsSource");
                userType.AddMemberName("ActualPaletteIndex");
                xamlType = userType;
                break;

            case 12:   //  Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PresenterBase"));
                userType.AddMemberName("ZIndex");
                userType.AddMemberName("Chart");
                xamlType = userType;
                break;

            case 13:   //  Telerik.UI.Xaml.Controls.Chart.CartesianAxis
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.LineAxis"));
                userType.AddMemberName("HorizontalLocation");
                userType.AddMemberName("VerticalLocation");
                xamlType = userType;
                break;

            case 14:   //  Telerik.UI.Xaml.Controls.Chart.LineAxis
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis"));
                userType.AddMemberName("IsInverse");
                xamlType = userType;
                break;

            case 15:   //  Telerik.UI.Xaml.Controls.Chart.Axis
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter"));
                userType.AddMemberName("LabelFormatter");
                userType.AddMemberName("LabelRotationAngle");
                userType.AddMemberName("LineStyle");
                userType.AddMemberName("LastLabelVisibility");
                userType.AddMemberName("LabelFormat");
                userType.AddMemberName("MajorTickOffset");
                userType.AddMemberName("LabelOffset");
                userType.AddMemberName("ShowLabels");
                userType.AddMemberName("LabelFitMode");
                userType.AddMemberName("Title");
                userType.AddMemberName("LabelTemplate");
                userType.AddMemberName("LabelTemplateSelector");
                userType.AddMemberName("LabelStyle");
                userType.AddMemberName("TitleTemplate");
                userType.AddMemberName("MajorTickTemplate");
                userType.AddMemberName("MajorTickStyle");
                userType.AddMemberName("TickThickness");
                userType.AddMemberName("LabelInterval");
                xamlType = userType;
                break;

            case 16:   //  Windows.UI.Xaml.Style
                xamlType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 17:   //  Windows.UI.Xaml.DataTemplate
                xamlType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 18:   //  Windows.UI.Xaml.Controls.DataTemplateSelector
                xamlType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  System.Collections.ObjectModel.ObservableCollection`1<Windows.UI.Xaml.DataTemplate>
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Windows.UI.Xaml.DataTemplate>"));
                userType.CollectionAdd = VectorAdd_19_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 20:   //  System.Collections.ObjectModel.Collection`1<Windows.UI.Xaml.DataTemplate>
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_20_Collection;
                userType.CollectionAdd = VectorAdd_20_Collection;
                xamlType = userType;
                break;

            case 21:   //  String
                xamlType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 22:   //  Boolean
                xamlType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 23:   //  Int32
                xamlType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 24:   //  System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>"));
                userType.CollectionAdd = VectorAdd_24_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 25:   //  System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_25_Collection;
                userType.CollectionAdd = VectorAdd_25_Collection;
                xamlType = userType;
                break;

            case 26:   //  Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_26_ChartSeriesLabelDefinition;
                userType.AddMemberName("Binding");
                userType.AddMemberName("Format");
                userType.AddMemberName("Margin");
                userType.AddMemberName("HorizontalAlignment");
                userType.AddMemberName("VerticalAlignment");
                userType.AddMemberName("Template");
                userType.AddMemberName("TemplateSelector");
                userType.AddMemberName("DefaultVisualStyle");
                userType.AddMemberName("Strategy");
                xamlType = userType;
                break;

            case 27:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 28:   //  Telerik.UI.Xaml.Controls.Chart.DataPointBinding
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 29:   //  Windows.UI.Xaml.Thickness
                xamlType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 30:   //  Windows.UI.Xaml.HorizontalAlignment
                xamlType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 31:   //  Windows.UI.Xaml.VerticalAlignment
                xamlType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 32:   //  Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelStrategy
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 33:   //  System.Collections.IEnumerable
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 34:   //  Telerik.UI.Xaml.Controls.Chart.IndicatorCollection
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PresenterCollection`1<Telerik.UI.Xaml.Controls.Chart.IndicatorBase>"));
                userType.CollectionAdd = VectorAdd_34_IndicatorCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 35:   //  Telerik.UI.Xaml.Controls.Chart.PresenterCollection`1<Telerik.UI.Xaml.Controls.Chart.IndicatorBase>
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.IndicatorBase>"));
                userType.CollectionAdd = VectorAdd_35_PresenterCollection;
                xamlType = userType;
                break;

            case 36:   //  System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.IndicatorBase>
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_36_Collection;
                userType.CollectionAdd = VectorAdd_36_Collection;
                xamlType = userType;
                break;

            case 37:   //  Telerik.UI.Xaml.Controls.Chart.IndicatorBase
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries"));
                userType.AddMemberName("DataPoints");
                userType.AddMemberName("CategoryBinding");
                xamlType = userType;
                break;

            case 38:   //  Telerik.Charting.DataPointCollection`1<Telerik.Charting.CategoricalDataPoint>
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.Core.ElementCollection`1<Telerik.Charting.CategoricalDataPoint>"));
                userType.CollectionAdd = VectorAdd_38_DataPointCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 39:   //  Telerik.Core.ElementCollection`1<Telerik.Charting.CategoricalDataPoint>
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Telerik.Charting.CategoricalDataPoint>"));
                userType.CollectionAdd = VectorAdd_39_ElementCollection;
                xamlType = userType;
                break;

            case 40:   //  System.Collections.ObjectModel.Collection`1<Telerik.Charting.CategoricalDataPoint>
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_40_Collection;
                userType.CollectionAdd = VectorAdd_40_Collection;
                xamlType = userType;
                break;

            case 41:   //  Telerik.Charting.CategoricalDataPoint
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.Charting.CategoricalDataPointBase"));
                userType.Activator = Activate_41_CategoricalDataPoint;
                userType.AddMemberName("Value");
                xamlType = userType;
                break;

            case 42:   //  Telerik.Charting.CategoricalDataPointBase
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.Charting.DataPoint"));
                userType.AddMemberName("Category");
                xamlType = userType;
                break;

            case 43:   //  Telerik.Charting.DataPoint
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.Core.Node"));
                userType.AddMemberName("Label");
                userType.AddMemberName("DataItem");
                userType.AddMemberName("IsSelected");
                xamlType = userType;
                break;

            case 44:   //  Telerik.Core.Node
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.Core.PropertyBagObject"));
                userType.AddMemberName("Presenter");
                userType.AddMemberName("IsArrangeValid");
                userType.AddMemberName("NodeState");
                userType.AddMemberName("Index");
                userType.AddMemberName("CollectionIndex");
                userType.AddMemberName("IsTreeLoaded");
                userType.AddMemberName("LayoutSlot");
                userType.AddMemberName("Parent");
                xamlType = userType;
                break;

            case 45:   //  Telerik.Core.PropertyBagObject
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 46:   //  Double
                xamlType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 47:   //  Telerik.Core.IElementPresenter
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 48:   //  Telerik.Core.NodeState
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Initial", global::Telerik.Core.NodeState.Initial);
                userType.AddEnumValue("Loading", global::Telerik.Core.NodeState.Loading);
                userType.AddEnumValue("Loaded", global::Telerik.Core.NodeState.Loaded);
                userType.AddEnumValue("Unloading", global::Telerik.Core.NodeState.Unloading);
                userType.AddEnumValue("Unloaded", global::Telerik.Core.NodeState.Unloaded);
                xamlType = userType;
                break;

            case 49:   //  System.Enum
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 50:   //  System.ValueType
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 51:   //  Telerik.Core.RadRect
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 52:   //  Telerik.Core.Element
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.Core.Node"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 53:   //  Telerik.UI.Xaml.Controls.Chart.CartesianAnnotationCollection
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PresenterCollection`1<Telerik.UI.Xaml.Controls.Chart.CartesianChartAnnotation>"));
                userType.CollectionAdd = VectorAdd_53_CartesianAnnotationCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 54:   //  Telerik.UI.Xaml.Controls.Chart.PresenterCollection`1<Telerik.UI.Xaml.Controls.Chart.CartesianChartAnnotation>
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.CartesianChartAnnotation>"));
                userType.CollectionAdd = VectorAdd_54_PresenterCollection;
                xamlType = userType;
                break;

            case 55:   //  System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.CartesianChartAnnotation>
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_55_Collection;
                userType.CollectionAdd = VectorAdd_55_Collection;
                xamlType = userType;
                break;

            case 56:   //  Telerik.UI.Xaml.Controls.Chart.CartesianChartAnnotation
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotation"));
                xamlType = userType;
                break;

            case 57:   //  Telerik.UI.Xaml.Controls.Chart.ChartAnnotation
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter"));
                userType.AddMemberName("ClipToPlotArea");
                xamlType = userType;
                break;

            case 58:   //  Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartGrid"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 59:   //  Telerik.UI.Xaml.Controls.Chart.ChartGrid
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter"));
                xamlType = userType;
                break;

            case 60:   //  Telerik.UI.Xaml.Controls.Chart.ChartSeriesProvider
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 61:   //  Telerik.UI.Xaml.Controls.Chart.ChartPalette
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_61_ChartPalette;
                userType.AddMemberName("Name");
                userType.AddMemberName("FillEntries");
                userType.AddMemberName("SpecialFillEntries");
                userType.AddMemberName("StrokeEntries");
                userType.AddMemberName("SpecialStrokeEntries");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 62:   //  Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName.None);
                userType.AddEnumValue("DefaultDark", global::Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName.DefaultDark);
                userType.AddEnumValue("DefaultLight", global::Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName.DefaultLight);
                userType.AddEnumValue("DefaultDarkSelected", global::Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName.DefaultDarkSelected);
                userType.AddEnumValue("DefaultLightSelected", global::Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName.DefaultLightSelected);
                xamlType = userType;
                break;

            case 63:   //  Telerik.UI.Xaml.Controls.Chart.ChartBehaviorCollection
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.ChartBehavior>"));
                userType.CollectionAdd = VectorAdd_63_ChartBehaviorCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 64:   //  System.Collections.ObjectModel.Collection`1<Telerik.UI.Xaml.Controls.Chart.ChartBehavior>
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_64_Collection;
                userType.CollectionAdd = VectorAdd_64_Collection;
                xamlType = userType;
                break;

            case 65:   //  Telerik.UI.Xaml.Controls.Chart.ChartBehavior
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.AddMemberName("Chart");
                xamlType = userType;
                break;

            case 66:   //  Windows.Foundation.Size
                xamlType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 67:   //  Windows.Foundation.Point
                xamlType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 68:   //  Telerik.UI.Xaml.Controls.Chart.CategoricalAxis
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CartesianAxis"));
                userType.Activator = Activate_68_CategoricalAxis;
                userType.AddMemberName("AutoGroup");
                userType.AddMemberName("MajorTickInterval");
                userType.AddMemberName("PlotMode");
                userType.AddMemberName("GapLength");
                xamlType = userType;
                break;

            case 69:   //  Telerik.Charting.AxisPlotMode
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("BetweenTicks", global::Telerik.Charting.AxisPlotMode.BetweenTicks);
                userType.AddEnumValue("OnTicks", global::Telerik.Charting.AxisPlotMode.OnTicks);
                userType.AddEnumValue("OnTicksPadded", global::Telerik.Charting.AxisPlotMode.OnTicksPadded);
                xamlType = userType;
                break;

            case 70:   //  Telerik.Charting.AxisHorizontalLocation
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Left", global::Telerik.Charting.AxisHorizontalLocation.Left);
                userType.AddEnumValue("Right", global::Telerik.Charting.AxisHorizontalLocation.Right);
                xamlType = userType;
                break;

            case 71:   //  Telerik.Charting.AxisVerticalLocation
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Bottom", global::Telerik.Charting.AxisVerticalLocation.Bottom);
                userType.AddEnumValue("Top", global::Telerik.Charting.AxisVerticalLocation.Top);
                xamlType = userType;
                break;

            case 72:   //  Telerik.Charting.IContentFormatter
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 73:   //  Telerik.Charting.AxisLastLabelVisibility
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Visible", global::Telerik.Charting.AxisLastLabelVisibility.Visible);
                userType.AddEnumValue("Hidden", global::Telerik.Charting.AxisLastLabelVisibility.Hidden);
                userType.AddEnumValue("Clip", global::Telerik.Charting.AxisLastLabelVisibility.Clip);
                xamlType = userType;
                break;

            case 74:   //  Telerik.Charting.AxisLabelFitMode
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Telerik.Charting.AxisLabelFitMode.None);
                userType.AddEnumValue("MultiLine", global::Telerik.Charting.AxisLabelFitMode.MultiLine);
                userType.AddEnumValue("Rotate", global::Telerik.Charting.AxisLabelFitMode.Rotate);
                xamlType = userType;
                break;

            case 75:   //  Telerik.UI.Xaml.Controls.Chart.LinearAxis
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.NumericalAxis"));
                userType.Activator = Activate_75_LinearAxis;
                userType.AddMemberName("MajorStep");
                xamlType = userType;
                break;

            case 76:   //  Telerik.UI.Xaml.Controls.Chart.NumericalAxis
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CartesianAxis"));
                userType.AddMemberName("Minimum");
                userType.AddMemberName("Maximum");
                userType.AddMemberName("RangeExtendDirection");
                userType.AddMemberName("DesiredTickCount");
                userType.AddMemberName("ActualRange");
                xamlType = userType;
                break;

            case 77:   //  Telerik.Charting.NumericalAxisRangeExtendDirection
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Telerik.Charting.NumericalAxisRangeExtendDirection.None);
                userType.AddEnumValue("Positive", global::Telerik.Charting.NumericalAxisRangeExtendDirection.Positive);
                userType.AddEnumValue("Negative", global::Telerik.Charting.NumericalAxisRangeExtendDirection.Negative);
                userType.AddEnumValue("Both", global::Telerik.Charting.NumericalAxisRangeExtendDirection.Both);
                xamlType = userType;
                break;

            case 78:   //  Telerik.Core.ValueRange`1<Double>
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 79:   //  Telerik.UI.Xaml.Controls.Chart.LineSeries
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries"));
                userType.Activator = Activate_79_LineSeries;
                userType.SetContentPropertyName("Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase.DataPoints");
                xamlType = userType;
                break;

            case 80:   //  Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalSeries"));
                userType.SetContentPropertyName("Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase.DataPoints");
                userType.AddMemberName("Stroke");
                userType.AddMemberName("StrokeThickness");
                userType.AddMemberName("StrokeDashArray");
                userType.AddMemberName("StrokeLineJoin");
                xamlType = userType;
                break;

            case 81:   //  Telerik.UI.Xaml.Controls.Chart.CategoricalSeries
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase"));
                userType.SetContentPropertyName("Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase.DataPoints");
                userType.AddMemberName("CombineMode");
                userType.AddMemberName("StackGroupKey");
                xamlType = userType;
                break;

            case 82:   //  Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CartesianSeries"));
                userType.SetContentPropertyName("Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase.DataPoints");
                userType.AddMemberName("DataPoints");
                userType.AddMemberName("CategoryBinding");
                userType.AddMemberName("ValueBinding");
                xamlType = userType;
                break;

            case 83:   //  Windows.UI.Xaml.Media.Brush
                xamlType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 84:   //  Windows.UI.Xaml.Media.DoubleCollection
                xamlType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 85:   //  Windows.UI.Xaml.Media.PenLineJoin
                xamlType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 86:   //  Telerik.Charting.ChartSeriesCombineMode
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Telerik.Charting.ChartSeriesCombineMode.None);
                userType.AddEnumValue("Cluster", global::Telerik.Charting.ChartSeriesCombineMode.Cluster);
                userType.AddEnumValue("Stack", global::Telerik.Charting.ChartSeriesCombineMode.Stack);
                userType.AddEnumValue("Stack100", global::Telerik.Charting.ChartSeriesCombineMode.Stack100);
                xamlType = userType;
                break;

            case 87:   //  Telerik.UI.Xaml.Controls.Chart.PropertyNameDataPointBinding
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.DataPointBinding"));
                userType.Activator = Activate_87_PropertyNameDataPointBinding;
                userType.AddMemberName("PropertyName");
                xamlType = userType;
                break;

            case 88:   //  WifiThermometer.MainPage
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_88_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 89:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 90:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 91:   //  Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_91_ChartAnnotationLabelDefinition;
                userType.AddMemberName("Format");
                userType.AddMemberName("Template");
                userType.AddMemberName("DefaultVisualStyle");
                userType.AddMemberName("Location");
                userType.AddMemberName("HorizontalAlignment");
                userType.AddMemberName("VerticalAlignment");
                userType.AddMemberName("HorizontalOffset");
                userType.AddMemberName("VerticalOffset");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 92:   //  Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Left", global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation.Left);
                userType.AddEnumValue("Top", global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation.Top);
                userType.AddEnumValue("Right", global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation.Right);
                userType.AddEnumValue("Bottom", global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation.Bottom);
                userType.AddEnumValue("Inside", global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation.Inside);
                xamlType = userType;
                break;

            case 93:   //  Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_93_PaletteEntryCollection;
                userType.SetContentPropertyName("Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection.Brushes");
                userType.AddMemberName("Brushes");
                xamlType = userType;
                break;

            case 94:   //  System.Collections.Generic.List`1<Windows.UI.Xaml.Media.Brush>
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_94_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 95:   //  Telerik.UI.Xaml.Controls.Data.HexView.AngledHexLayoutDefinition
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase"));
                userType.Activator = Activate_95_AngledHexLayoutDefinition;
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 96:   //  Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.AddMemberName("Orientation");
                userType.AddMemberName("ItemLength");
                userType.AddMemberName("ItemsSpacing");
                userType.AddMemberName("ViewPortExtension");
                xamlType = userType;
                break;

            case 97:   //  Windows.UI.Xaml.Controls.Orientation
                xamlType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 98:   //  Telerik.UI.Xaml.Controls.Data.HexView.FlatLooseHexLayoutDefinition
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase"));
                userType.Activator = Activate_98_FlatLooseHexLayoutDefinition;
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 99:   //  Telerik.UI.Xaml.Controls.Data.HexView.FlatTightHexLayoutDefinition
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase"));
                userType.Activator = Activate_99_FlatTightHexLayoutDefinition;
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 100:   //  Telerik.UI.Xaml.Controls.Input.HighlightStyle
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_100_HighlightStyle;
                userType.AddMemberName("FontFamily");
                userType.AddMemberName("FontWeight");
                userType.AddMemberName("FontStyle");
                userType.AddMemberName("Foreground");
                userType.AddMemberName("FontSize");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 101:   //  Windows.UI.Xaml.Media.FontFamily
                xamlType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 102:   //  Telerik.UI.Xaml.Controls.Input.FontWeightName
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Black", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.Black);
                userType.AddEnumValue("Bold", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.Bold);
                userType.AddEnumValue("ExtraBlack", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.ExtraBlack);
                userType.AddEnumValue("ExtraBold", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.ExtraBold);
                userType.AddEnumValue("ExtraLight", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.ExtraLight);
                userType.AddEnumValue("Light", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.Light);
                userType.AddEnumValue("Medium", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.Medium);
                userType.AddEnumValue("Normal", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.Normal);
                userType.AddEnumValue("SemiBold", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.SemiBold);
                userType.AddEnumValue("SemiLight", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.SemiLight);
                userType.AddEnumValue("Thin", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.Thin);
                xamlType = userType;
                break;

            case 103:   //  Windows.UI.Text.FontStyle
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Normal", global::Windows.UI.Text.FontStyle.Normal);
                userType.AddEnumValue("Oblique", global::Windows.UI.Text.FontStyle.Oblique);
                userType.AddEnumValue("Italic", global::Windows.UI.Text.FontStyle.Italic);
                xamlType = userType;
                break;

            case 104:   //  Telerik.UI.Xaml.Controls.Input.CalendarCellStyle
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_104_CalendarCellStyle;
                userType.AddMemberName("ContentStyle");
                userType.AddMemberName("DecorationStyle");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 105:   //  Telerik.UI.Xaml.Controls.Primitives.BusyIndicator.BusyIndicatorAnimationAdapter
                userType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.FrameworkElement"));
                userType.Activator = Activate_105_BusyIndicatorAnimationAdapter;
                userType.AddMemberName("Animation");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 106:   //  Windows.UI.Xaml.FrameworkElement
                xamlType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 107:   //  Windows.UI.Xaml.Media.Animation.Storyboard
                xamlType = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Telerik.UI.Xaml.Controls.Chart.Chart_WindowsPhone_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Telerik.UI.Xaml.Controls.Data.DataControls_WindowsPhone_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Telerik.UI.Xaml.Controls.DataVisualization.DataVisualization_WindowsPhone_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Telerik.UI.Xaml.Controls.Input.Input_WindowsPhone_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Telerik.UI.Xaml.Controls.Primitives.Primitives_WindowsPhone_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_RadCartesianChart_Series(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadCartesianChart)instance;
            return that.Series;
        }
        private object get_1_CartesianSeries_HorizontalAxis(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries)instance;
            return that.HorizontalAxis;
        }
        private void set_1_CartesianSeries_HorizontalAxis(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries)instance;
            that.HorizontalAxis = (global::Telerik.UI.Xaml.Controls.Chart.CartesianAxis)Value;
        }
        private object get_2_CartesianSeries_VerticalAxis(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries)instance;
            return that.VerticalAxis;
        }
        private void set_2_CartesianSeries_VerticalAxis(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianSeries)instance;
            that.VerticalAxis = (global::Telerik.UI.Xaml.Controls.Chart.CartesianAxis)Value;
        }
        private object get_3_PointTemplateSeries_DefaultVisualStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries)instance;
            return that.DefaultVisualStyle;
        }
        private void set_3_PointTemplateSeries_DefaultVisualStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries)instance;
            that.DefaultVisualStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_4_PointTemplateSeries_PointTemplate(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries)instance;
            return that.PointTemplate;
        }
        private void set_4_PointTemplateSeries_PointTemplate(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries)instance;
            that.PointTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_5_PointTemplateSeries_PointTemplateSelector(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries)instance;
            return that.PointTemplateSelector;
        }
        private void set_5_PointTemplateSeries_PointTemplateSelector(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries)instance;
            that.PointTemplateSelector = (global::Windows.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_6_PointTemplateSeries_PointTemplates(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries)instance;
            return that.PointTemplates;
        }
        private object get_7_PointTemplateSeries_LegendTitle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries)instance;
            return that.LegendTitle;
        }
        private void set_7_PointTemplateSeries_LegendTitle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries)instance;
            that.LegendTitle = (global::System.String)Value;
        }
        private object get_8_PointTemplateSeries_IsVisibleInLegend(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries)instance;
            return that.IsVisibleInLegend;
        }
        private void set_8_PointTemplateSeries_IsVisibleInLegend(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries)instance;
            that.IsVisibleInLegend = (global::System.Boolean)Value;
        }
        private object get_9_ChartSeries_IsSelected(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.IsSelected;
        }
        private void set_9_ChartSeries_IsSelected(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            that.IsSelected = (global::System.Boolean)Value;
        }
        private object get_10_ChartSeries_AllowSelect(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.AllowSelect;
        }
        private void set_10_ChartSeries_AllowSelect(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            that.AllowSelect = (global::System.Boolean)Value;
        }
        private object get_11_ChartSeries_PaletteIndex(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.PaletteIndex;
        }
        private void set_11_ChartSeries_PaletteIndex(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            that.PaletteIndex = (global::System.Int32)Value;
        }
        private object get_12_ChartSeries_LabelDefinitions(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.LabelDefinitions;
        }
        private object get_13_ChartSeriesLabelDefinition_Binding(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            return that.Binding;
        }
        private void set_13_ChartSeriesLabelDefinition_Binding(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            that.Binding = (global::Telerik.UI.Xaml.Controls.Chart.DataPointBinding)Value;
        }
        private object get_14_ChartSeriesLabelDefinition_Format(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            return that.Format;
        }
        private void set_14_ChartSeriesLabelDefinition_Format(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            that.Format = (global::System.String)Value;
        }
        private object get_15_ChartSeriesLabelDefinition_Margin(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            return that.Margin;
        }
        private void set_15_ChartSeriesLabelDefinition_Margin(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            that.Margin = (global::Windows.UI.Xaml.Thickness)Value;
        }
        private object get_16_ChartSeriesLabelDefinition_HorizontalAlignment(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            return that.HorizontalAlignment;
        }
        private void set_16_ChartSeriesLabelDefinition_HorizontalAlignment(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            that.HorizontalAlignment = (global::Windows.UI.Xaml.HorizontalAlignment)Value;
        }
        private object get_17_ChartSeriesLabelDefinition_VerticalAlignment(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            return that.VerticalAlignment;
        }
        private void set_17_ChartSeriesLabelDefinition_VerticalAlignment(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            that.VerticalAlignment = (global::Windows.UI.Xaml.VerticalAlignment)Value;
        }
        private object get_18_ChartSeriesLabelDefinition_Template(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            return that.Template;
        }
        private void set_18_ChartSeriesLabelDefinition_Template(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            that.Template = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_19_ChartSeriesLabelDefinition_TemplateSelector(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            return that.TemplateSelector;
        }
        private void set_19_ChartSeriesLabelDefinition_TemplateSelector(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            that.TemplateSelector = (global::Windows.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_20_ChartSeriesLabelDefinition_DefaultVisualStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            return that.DefaultVisualStyle;
        }
        private void set_20_ChartSeriesLabelDefinition_DefaultVisualStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            that.DefaultVisualStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_21_ChartSeriesLabelDefinition_Strategy(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            return that.Strategy;
        }
        private void set_21_ChartSeriesLabelDefinition_Strategy(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition)instance;
            that.Strategy = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelStrategy)Value;
        }
        private object get_22_ChartSeries_IsSelectedBinding(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.IsSelectedBinding;
        }
        private void set_22_ChartSeries_IsSelectedBinding(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            that.IsSelectedBinding = (global::Telerik.UI.Xaml.Controls.Chart.DataPointBinding)Value;
        }
        private object get_23_ChartSeries_ShowLabels(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.ShowLabels;
        }
        private void set_23_ChartSeries_ShowLabels(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            that.ShowLabels = (global::System.Boolean)Value;
        }
        private object get_24_ChartSeries_DisplayName(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.DisplayName;
        }
        private void set_24_ChartSeries_DisplayName(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            that.DisplayName = (global::System.String)Value;
        }
        private object get_25_ChartSeries_ClipToPlotArea(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.ClipToPlotArea;
        }
        private void set_25_ChartSeries_ClipToPlotArea(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            that.ClipToPlotArea = (global::System.Boolean)Value;
        }
        private object get_26_ChartSeries_ItemsSource(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.ItemsSource;
        }
        private void set_26_ChartSeries_ItemsSource(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            that.ItemsSource = (global::System.Collections.IEnumerable)Value;
        }
        private object get_27_ChartSeries_ActualPaletteIndex(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeries)instance;
            return that.ActualPaletteIndex;
        }
        private object get_28_ChartElementPresenter_ZIndex(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter)instance;
            return that.ZIndex;
        }
        private void set_28_ChartElementPresenter_ZIndex(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter)instance;
            that.ZIndex = (global::System.Int32)Value;
        }
        private object get_29_ChartElementPresenter_Chart(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter)instance;
            return that.Chart;
        }
        private object get_30_RadControl_CurrentVisualState(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.RadControl)instance;
            return that.CurrentVisualState;
        }
        private object get_31_RadCartesianChart_HorizontalAxis(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadCartesianChart)instance;
            return that.HorizontalAxis;
        }
        private void set_31_RadCartesianChart_HorizontalAxis(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadCartesianChart)instance;
            that.HorizontalAxis = (global::Telerik.UI.Xaml.Controls.Chart.CartesianAxis)Value;
        }
        private object get_32_RadCartesianChart_VerticalAxis(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadCartesianChart)instance;
            return that.VerticalAxis;
        }
        private void set_32_RadCartesianChart_VerticalAxis(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadCartesianChart)instance;
            that.VerticalAxis = (global::Telerik.UI.Xaml.Controls.Chart.CartesianAxis)Value;
        }
        private object get_33_RadCartesianChart_Indicators(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadCartesianChart)instance;
            return that.Indicators;
        }
        private object get_34_IndicatorBase_DataPoints(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase)instance;
            return that.DataPoints;
        }
        private object get_35_CategoricalDataPoint_Value(object instance)
        {
            var that = (global::Telerik.Charting.CategoricalDataPoint)instance;
            return that.Value;
        }
        private void set_35_CategoricalDataPoint_Value(object instance, object Value)
        {
            var that = (global::Telerik.Charting.CategoricalDataPoint)instance;
            that.Value = (global::System.Double)Value;
        }
        private object get_36_CategoricalDataPointBase_Category(object instance)
        {
            var that = (global::Telerik.Charting.CategoricalDataPointBase)instance;
            return that.Category;
        }
        private void set_36_CategoricalDataPointBase_Category(object instance, object Value)
        {
            var that = (global::Telerik.Charting.CategoricalDataPointBase)instance;
            that.Category = (global::System.Object)Value;
        }
        private object get_37_DataPoint_Label(object instance)
        {
            var that = (global::Telerik.Charting.DataPoint)instance;
            return that.Label;
        }
        private void set_37_DataPoint_Label(object instance, object Value)
        {
            var that = (global::Telerik.Charting.DataPoint)instance;
            that.Label = (global::System.Object)Value;
        }
        private object get_38_DataPoint_DataItem(object instance)
        {
            var that = (global::Telerik.Charting.DataPoint)instance;
            return that.DataItem;
        }
        private object get_39_DataPoint_IsSelected(object instance)
        {
            var that = (global::Telerik.Charting.DataPoint)instance;
            return that.IsSelected;
        }
        private void set_39_DataPoint_IsSelected(object instance, object Value)
        {
            var that = (global::Telerik.Charting.DataPoint)instance;
            that.IsSelected = (global::System.Boolean)Value;
        }
        private object get_40_Node_Presenter(object instance)
        {
            var that = (global::Telerik.Core.Node)instance;
            return that.Presenter;
        }
        private object get_41_Node_IsArrangeValid(object instance)
        {
            var that = (global::Telerik.Core.Node)instance;
            return that.IsArrangeValid;
        }
        private object get_42_Node_NodeState(object instance)
        {
            var that = (global::Telerik.Core.Node)instance;
            return that.NodeState;
        }
        private object get_43_Node_Index(object instance)
        {
            var that = (global::Telerik.Core.Node)instance;
            return that.Index;
        }
        private object get_44_Node_CollectionIndex(object instance)
        {
            var that = (global::Telerik.Core.Node)instance;
            return that.CollectionIndex;
        }
        private object get_45_Node_IsTreeLoaded(object instance)
        {
            var that = (global::Telerik.Core.Node)instance;
            return that.IsTreeLoaded;
        }
        private object get_46_Node_LayoutSlot(object instance)
        {
            var that = (global::Telerik.Core.Node)instance;
            return that.LayoutSlot;
        }
        private object get_47_Node_Parent(object instance)
        {
            var that = (global::Telerik.Core.Node)instance;
            return that.Parent;
        }
        private object get_48_IndicatorBase_CategoryBinding(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase)instance;
            return that.CategoryBinding;
        }
        private void set_48_IndicatorBase_CategoryBinding(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.IndicatorBase)instance;
            that.CategoryBinding = (global::Telerik.UI.Xaml.Controls.Chart.DataPointBinding)Value;
        }
        private object get_49_RadCartesianChart_Annotations(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadCartesianChart)instance;
            return that.Annotations;
        }
        private object get_50_ChartAnnotation_ClipToPlotArea(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotation)instance;
            return that.ClipToPlotArea;
        }
        private void set_50_ChartAnnotation_ClipToPlotArea(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotation)instance;
            that.ClipToPlotArea = (global::System.Boolean)Value;
        }
        private object get_51_RadCartesianChart_Grid(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadCartesianChart)instance;
            return that.Grid;
        }
        private void set_51_RadCartesianChart_Grid(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadCartesianChart)instance;
            that.Grid = (global::Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid)Value;
        }
        private object get_52_RadChartBase_SeriesProvider(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.SeriesProvider;
        }
        private void set_52_RadChartBase_SeriesProvider(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.SeriesProvider = (global::Telerik.UI.Xaml.Controls.Chart.ChartSeriesProvider)Value;
        }
        private object get_53_RadChartBase_ClipToBounds(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.ClipToBounds;
        }
        private void set_53_RadChartBase_ClipToBounds(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.ClipToBounds = (global::System.Boolean)Value;
        }
        private object get_54_RadChartBase_EmptyContent(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.EmptyContent;
        }
        private void set_54_RadChartBase_EmptyContent(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.EmptyContent = (global::System.Object)Value;
        }
        private object get_55_RadChartBase_EmptyContentTemplate(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.EmptyContentTemplate;
        }
        private void set_55_RadChartBase_EmptyContentTemplate(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.EmptyContentTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_56_RadChartBase_PlotAreaStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.PlotAreaStyle;
        }
        private void set_56_RadChartBase_PlotAreaStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.PlotAreaStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_57_RadChartBase_Palette(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.Palette;
        }
        private void set_57_RadChartBase_Palette(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.Palette = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)Value;
        }
        private object get_58_RadChartBase_PaletteName(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.PaletteName;
        }
        private void set_58_RadChartBase_PaletteName(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.PaletteName = (global::Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName)Value;
        }
        private object get_59_RadChartBase_SelectionPalette(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.SelectionPalette;
        }
        private void set_59_RadChartBase_SelectionPalette(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.SelectionPalette = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)Value;
        }
        private object get_60_RadChartBase_SelectionPaletteName(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.SelectionPaletteName;
        }
        private void set_60_RadChartBase_SelectionPaletteName(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.SelectionPaletteName = (global::Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName)Value;
        }
        private object get_61_RadChartBase_Behaviors(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.Behaviors;
        }
        private object get_62_ChartBehavior_Chart(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartBehavior)instance;
            return that.Chart;
        }
        private object get_63_RadChartBase_Zoom(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.Zoom;
        }
        private void set_63_RadChartBase_Zoom(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.Zoom = (global::Windows.Foundation.Size)Value;
        }
        private object get_64_RadChartBase_MaxZoom(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.MaxZoom;
        }
        private void set_64_RadChartBase_MaxZoom(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.MaxZoom = (global::Windows.Foundation.Size)Value;
        }
        private object get_65_RadChartBase_MinZoom(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.MinZoom;
        }
        private void set_65_RadChartBase_MinZoom(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.MinZoom = (global::Windows.Foundation.Size)Value;
        }
        private object get_66_RadChartBase_PlotOrigin(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.PlotOrigin;
        }
        private object get_67_RadChartBase_PlotAreaClip(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.PlotAreaClip;
        }
        private object get_68_RadChartBase_ScrollOffset(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            return that.ScrollOffset;
        }
        private void set_68_RadChartBase_ScrollOffset(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.RadChartBase)instance;
            that.ScrollOffset = (global::Windows.Foundation.Point)Value;
        }
        private object get_69_CategoricalAxis_AutoGroup(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalAxis)instance;
            return that.AutoGroup;
        }
        private void set_69_CategoricalAxis_AutoGroup(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalAxis)instance;
            that.AutoGroup = (global::System.Boolean)Value;
        }
        private object get_70_CategoricalAxis_MajorTickInterval(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalAxis)instance;
            return that.MajorTickInterval;
        }
        private void set_70_CategoricalAxis_MajorTickInterval(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalAxis)instance;
            that.MajorTickInterval = (global::System.Int32)Value;
        }
        private object get_71_CategoricalAxis_PlotMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalAxis)instance;
            return that.PlotMode;
        }
        private void set_71_CategoricalAxis_PlotMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalAxis)instance;
            that.PlotMode = (global::Telerik.Charting.AxisPlotMode)Value;
        }
        private object get_72_CategoricalAxis_GapLength(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalAxis)instance;
            return that.GapLength;
        }
        private void set_72_CategoricalAxis_GapLength(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalAxis)instance;
            that.GapLength = (global::System.Double)Value;
        }
        private object get_73_CartesianAxis_HorizontalLocation(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianAxis)instance;
            return that.HorizontalLocation;
        }
        private void set_73_CartesianAxis_HorizontalLocation(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianAxis)instance;
            that.HorizontalLocation = (global::Telerik.Charting.AxisHorizontalLocation)Value;
        }
        private object get_74_CartesianAxis_VerticalLocation(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianAxis)instance;
            return that.VerticalLocation;
        }
        private void set_74_CartesianAxis_VerticalLocation(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CartesianAxis)instance;
            that.VerticalLocation = (global::Telerik.Charting.AxisVerticalLocation)Value;
        }
        private object get_75_LineAxis_IsInverse(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.LineAxis)instance;
            return that.IsInverse;
        }
        private void set_75_LineAxis_IsInverse(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.LineAxis)instance;
            that.IsInverse = (global::System.Boolean)Value;
        }
        private object get_76_Axis_LabelFormatter(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.LabelFormatter;
        }
        private void set_76_Axis_LabelFormatter(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.LabelFormatter = (global::Telerik.Charting.IContentFormatter)Value;
        }
        private object get_77_Axis_LabelRotationAngle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.LabelRotationAngle;
        }
        private void set_77_Axis_LabelRotationAngle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.LabelRotationAngle = (global::System.Double)Value;
        }
        private object get_78_Axis_LineStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.LineStyle;
        }
        private void set_78_Axis_LineStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.LineStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_79_Axis_LastLabelVisibility(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.LastLabelVisibility;
        }
        private void set_79_Axis_LastLabelVisibility(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.LastLabelVisibility = (global::Telerik.Charting.AxisLastLabelVisibility)Value;
        }
        private object get_80_Axis_LabelFormat(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.LabelFormat;
        }
        private void set_80_Axis_LabelFormat(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.LabelFormat = (global::System.String)Value;
        }
        private object get_81_Axis_MajorTickOffset(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.MajorTickOffset;
        }
        private void set_81_Axis_MajorTickOffset(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.MajorTickOffset = (global::System.Int32)Value;
        }
        private object get_82_Axis_LabelOffset(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.LabelOffset;
        }
        private void set_82_Axis_LabelOffset(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.LabelOffset = (global::System.Int32)Value;
        }
        private object get_83_Axis_ShowLabels(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.ShowLabels;
        }
        private void set_83_Axis_ShowLabels(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.ShowLabels = (global::System.Boolean)Value;
        }
        private object get_84_Axis_LabelFitMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.LabelFitMode;
        }
        private void set_84_Axis_LabelFitMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.LabelFitMode = (global::Telerik.Charting.AxisLabelFitMode)Value;
        }
        private object get_85_Axis_Title(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.Title;
        }
        private void set_85_Axis_Title(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.Title = (global::System.Object)Value;
        }
        private object get_86_Axis_LabelTemplate(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.LabelTemplate;
        }
        private void set_86_Axis_LabelTemplate(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.LabelTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_87_Axis_LabelTemplateSelector(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.LabelTemplateSelector;
        }
        private void set_87_Axis_LabelTemplateSelector(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.LabelTemplateSelector = (global::Windows.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_88_Axis_LabelStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.LabelStyle;
        }
        private void set_88_Axis_LabelStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.LabelStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_89_Axis_TitleTemplate(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.TitleTemplate;
        }
        private void set_89_Axis_TitleTemplate(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.TitleTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_90_Axis_MajorTickTemplate(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.MajorTickTemplate;
        }
        private void set_90_Axis_MajorTickTemplate(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.MajorTickTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_91_Axis_MajorTickStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.MajorTickStyle;
        }
        private void set_91_Axis_MajorTickStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.MajorTickStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_92_Axis_TickThickness(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.TickThickness;
        }
        private void set_92_Axis_TickThickness(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.TickThickness = (global::System.Double)Value;
        }
        private object get_93_Axis_LabelInterval(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            return that.LabelInterval;
        }
        private void set_93_Axis_LabelInterval(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.Axis)instance;
            that.LabelInterval = (global::System.Int32)Value;
        }
        private object get_94_LinearAxis_MajorStep(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.LinearAxis)instance;
            return that.MajorStep;
        }
        private void set_94_LinearAxis_MajorStep(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.LinearAxis)instance;
            that.MajorStep = (global::System.Double)Value;
        }
        private object get_95_NumericalAxis_Minimum(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.NumericalAxis)instance;
            return that.Minimum;
        }
        private void set_95_NumericalAxis_Minimum(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.NumericalAxis)instance;
            that.Minimum = (global::System.Double)Value;
        }
        private object get_96_NumericalAxis_Maximum(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.NumericalAxis)instance;
            return that.Maximum;
        }
        private void set_96_NumericalAxis_Maximum(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.NumericalAxis)instance;
            that.Maximum = (global::System.Double)Value;
        }
        private object get_97_NumericalAxis_RangeExtendDirection(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.NumericalAxis)instance;
            return that.RangeExtendDirection;
        }
        private void set_97_NumericalAxis_RangeExtendDirection(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.NumericalAxis)instance;
            that.RangeExtendDirection = (global::Telerik.Charting.NumericalAxisRangeExtendDirection)Value;
        }
        private object get_98_NumericalAxis_DesiredTickCount(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.NumericalAxis)instance;
            return that.DesiredTickCount;
        }
        private void set_98_NumericalAxis_DesiredTickCount(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.NumericalAxis)instance;
            that.DesiredTickCount = (global::System.Int32)Value;
        }
        private object get_99_NumericalAxis_ActualRange(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.NumericalAxis)instance;
            return that.ActualRange;
        }
        private object get_100_CategoricalSeriesBase_DataPoints(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase)instance;
            return that.DataPoints;
        }
        private object get_101_CategoricalStrokedSeries_Stroke(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries)instance;
            return that.Stroke;
        }
        private void set_101_CategoricalStrokedSeries_Stroke(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries)instance;
            that.Stroke = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_102_CategoricalStrokedSeries_StrokeThickness(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries)instance;
            return that.StrokeThickness;
        }
        private void set_102_CategoricalStrokedSeries_StrokeThickness(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries)instance;
            that.StrokeThickness = (global::System.Double)Value;
        }
        private object get_103_CategoricalSeriesBase_CategoryBinding(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase)instance;
            return that.CategoryBinding;
        }
        private void set_103_CategoricalSeriesBase_CategoryBinding(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase)instance;
            that.CategoryBinding = (global::Telerik.UI.Xaml.Controls.Chart.DataPointBinding)Value;
        }
        private object get_104_CategoricalSeriesBase_ValueBinding(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase)instance;
            return that.ValueBinding;
        }
        private void set_104_CategoricalSeriesBase_ValueBinding(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase)instance;
            that.ValueBinding = (global::Telerik.UI.Xaml.Controls.Chart.DataPointBinding)Value;
        }
        private object get_105_CategoricalStrokedSeries_StrokeDashArray(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries)instance;
            return that.StrokeDashArray;
        }
        private void set_105_CategoricalStrokedSeries_StrokeDashArray(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries)instance;
            that.StrokeDashArray = (global::Windows.UI.Xaml.Media.DoubleCollection)Value;
        }
        private object get_106_CategoricalStrokedSeries_StrokeLineJoin(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries)instance;
            return that.StrokeLineJoin;
        }
        private void set_106_CategoricalStrokedSeries_StrokeLineJoin(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries)instance;
            that.StrokeLineJoin = (global::Windows.UI.Xaml.Media.PenLineJoin)Value;
        }
        private object get_107_CategoricalSeries_CombineMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalSeries)instance;
            return that.CombineMode;
        }
        private void set_107_CategoricalSeries_CombineMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalSeries)instance;
            that.CombineMode = (global::Telerik.Charting.ChartSeriesCombineMode)Value;
        }
        private object get_108_CategoricalSeries_StackGroupKey(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalSeries)instance;
            return that.StackGroupKey;
        }
        private void set_108_CategoricalSeries_StackGroupKey(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.CategoricalSeries)instance;
            that.StackGroupKey = (global::System.Object)Value;
        }
        private object get_109_PropertyNameDataPointBinding_PropertyName(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PropertyNameDataPointBinding)instance;
            return that.PropertyName;
        }
        private void set_109_PropertyNameDataPointBinding_PropertyName(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PropertyNameDataPointBinding)instance;
            that.PropertyName = (global::System.String)Value;
        }
        private object get_110_ChartAnnotationLabelDefinition_Format(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.Format;
        }
        private void set_110_ChartAnnotationLabelDefinition_Format(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.Format = (global::System.String)Value;
        }
        private object get_111_ChartAnnotationLabelDefinition_Template(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.Template;
        }
        private void set_111_ChartAnnotationLabelDefinition_Template(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.Template = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_112_ChartAnnotationLabelDefinition_DefaultVisualStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.DefaultVisualStyle;
        }
        private void set_112_ChartAnnotationLabelDefinition_DefaultVisualStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.DefaultVisualStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_113_ChartAnnotationLabelDefinition_Location(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.Location;
        }
        private void set_113_ChartAnnotationLabelDefinition_Location(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.Location = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation)Value;
        }
        private object get_114_ChartAnnotationLabelDefinition_HorizontalAlignment(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.HorizontalAlignment;
        }
        private void set_114_ChartAnnotationLabelDefinition_HorizontalAlignment(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.HorizontalAlignment = (global::Windows.UI.Xaml.HorizontalAlignment)Value;
        }
        private object get_115_ChartAnnotationLabelDefinition_VerticalAlignment(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.VerticalAlignment;
        }
        private void set_115_ChartAnnotationLabelDefinition_VerticalAlignment(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.VerticalAlignment = (global::Windows.UI.Xaml.VerticalAlignment)Value;
        }
        private object get_116_ChartAnnotationLabelDefinition_HorizontalOffset(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.HorizontalOffset;
        }
        private void set_116_ChartAnnotationLabelDefinition_HorizontalOffset(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.HorizontalOffset = (global::System.Double)Value;
        }
        private object get_117_ChartAnnotationLabelDefinition_VerticalOffset(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.VerticalOffset;
        }
        private void set_117_ChartAnnotationLabelDefinition_VerticalOffset(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.VerticalOffset = (global::System.Double)Value;
        }
        private object get_118_ChartPalette_Name(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            return that.Name;
        }
        private void set_118_ChartPalette_Name(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_119_ChartPalette_FillEntries(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            return that.FillEntries;
        }
        private void set_119_ChartPalette_FillEntries(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            that.FillEntries = (global::Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection)Value;
        }
        private object get_120_PaletteEntryCollection_Brushes(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection)instance;
            return that.Brushes;
        }
        private object get_121_ChartPalette_SpecialFillEntries(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            return that.SpecialFillEntries;
        }
        private void set_121_ChartPalette_SpecialFillEntries(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            that.SpecialFillEntries = (global::Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection)Value;
        }
        private object get_122_ChartPalette_StrokeEntries(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            return that.StrokeEntries;
        }
        private void set_122_ChartPalette_StrokeEntries(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            that.StrokeEntries = (global::Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection)Value;
        }
        private object get_123_ChartPalette_SpecialStrokeEntries(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            return that.SpecialStrokeEntries;
        }
        private void set_123_ChartPalette_SpecialStrokeEntries(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartPalette)instance;
            that.SpecialStrokeEntries = (global::Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection)Value;
        }
        private object get_124_HexLayoutDefinitionBase_Orientation(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase)instance;
            return that.Orientation;
        }
        private void set_124_HexLayoutDefinitionBase_Orientation(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase)instance;
            that.Orientation = (global::Windows.UI.Xaml.Controls.Orientation)Value;
        }
        private object get_125_HexLayoutDefinitionBase_ItemLength(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase)instance;
            return that.ItemLength;
        }
        private void set_125_HexLayoutDefinitionBase_ItemLength(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase)instance;
            that.ItemLength = (global::System.Double)Value;
        }
        private object get_126_HexLayoutDefinitionBase_ItemsSpacing(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase)instance;
            return that.ItemsSpacing;
        }
        private void set_126_HexLayoutDefinitionBase_ItemsSpacing(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase)instance;
            that.ItemsSpacing = (global::System.Double)Value;
        }
        private object get_127_HexLayoutDefinitionBase_ViewPortExtension(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase)instance;
            return that.ViewPortExtension;
        }
        private void set_127_HexLayoutDefinitionBase_ViewPortExtension(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase)instance;
            that.ViewPortExtension = (global::System.Double)Value;
        }
        private object get_128_HighlightStyle_FontFamily(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            return that.FontFamily;
        }
        private void set_128_HighlightStyle_FontFamily(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            that.FontFamily = (global::Windows.UI.Xaml.Media.FontFamily)Value;
        }
        private object get_129_HighlightStyle_FontWeight(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            return that.FontWeight;
        }
        private void set_129_HighlightStyle_FontWeight(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            that.FontWeight = (global::Telerik.UI.Xaml.Controls.Input.FontWeightName)Value;
        }
        private object get_130_HighlightStyle_FontStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            return that.FontStyle;
        }
        private void set_130_HighlightStyle_FontStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            that.FontStyle = (global::Windows.UI.Text.FontStyle)Value;
        }
        private object get_131_HighlightStyle_Foreground(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            return that.Foreground;
        }
        private void set_131_HighlightStyle_Foreground(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            that.Foreground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_132_HighlightStyle_FontSize(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            return that.FontSize;
        }
        private void set_132_HighlightStyle_FontSize(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            that.FontSize = (global::System.Double)Value;
        }
        private object get_133_CalendarCellStyle_ContentStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.CalendarCellStyle)instance;
            return that.ContentStyle;
        }
        private void set_133_CalendarCellStyle_ContentStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.CalendarCellStyle)instance;
            that.ContentStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_134_CalendarCellStyle_DecorationStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.CalendarCellStyle)instance;
            return that.DecorationStyle;
        }
        private void set_134_CalendarCellStyle_DecorationStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.CalendarCellStyle)instance;
            that.DecorationStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_135_BusyIndicatorAnimationAdapter_Animation(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.BusyIndicator.BusyIndicatorAnimationAdapter)instance;
            return that.Animation;
        }
        private void set_135_BusyIndicatorAnimationAdapter_Animation(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Primitives.BusyIndicator.BusyIndicatorAnimationAdapter)instance;
            that.Animation = (global::Windows.UI.Xaml.Media.Animation.Storyboard)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember xamlMember = null;
            global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Telerik.UI.Xaml.Controls.Chart.RadCartesianChart.Series":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadCartesianChart");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Series", "Telerik.UI.Xaml.Controls.Chart.CartesianSeriesCollection");
                xamlMember.Getter = get_0_RadCartesianChart_Series;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CartesianSeries.HorizontalAxis":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CartesianSeries");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "HorizontalAxis", "Telerik.UI.Xaml.Controls.Chart.CartesianAxis");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_CartesianSeries_HorizontalAxis;
                xamlMember.Setter = set_1_CartesianSeries_HorizontalAxis;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CartesianSeries.VerticalAxis":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CartesianSeries");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "VerticalAxis", "Telerik.UI.Xaml.Controls.Chart.CartesianAxis");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_CartesianSeries_VerticalAxis;
                xamlMember.Setter = set_2_CartesianSeries_VerticalAxis;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries.DefaultVisualStyle":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "DefaultVisualStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_PointTemplateSeries_DefaultVisualStyle;
                xamlMember.Setter = set_3_PointTemplateSeries_DefaultVisualStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries.PointTemplate":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "PointTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_PointTemplateSeries_PointTemplate;
                xamlMember.Setter = set_4_PointTemplateSeries_PointTemplate;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries.PointTemplateSelector":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "PointTemplateSelector", "Windows.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_PointTemplateSeries_PointTemplateSelector;
                xamlMember.Setter = set_5_PointTemplateSeries_PointTemplateSelector;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries.PointTemplates":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "PointTemplates", "System.Collections.ObjectModel.ObservableCollection`1<Windows.UI.Xaml.DataTemplate>");
                xamlMember.Getter = get_6_PointTemplateSeries_PointTemplates;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries.LegendTitle":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "LegendTitle", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_PointTemplateSeries_LegendTitle;
                xamlMember.Setter = set_7_PointTemplateSeries_LegendTitle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries.IsVisibleInLegend":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PointTemplateSeries");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "IsVisibleInLegend", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_PointTemplateSeries_IsVisibleInLegend;
                xamlMember.Setter = set_8_PointTemplateSeries_IsVisibleInLegend;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.IsSelected":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_ChartSeries_IsSelected;
                xamlMember.Setter = set_9_ChartSeries_IsSelected;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.AllowSelect":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "AllowSelect", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_ChartSeries_AllowSelect;
                xamlMember.Setter = set_10_ChartSeries_AllowSelect;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.PaletteIndex":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "PaletteIndex", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_ChartSeries_PaletteIndex;
                xamlMember.Setter = set_11_ChartSeries_PaletteIndex;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.LabelDefinitions":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "LabelDefinitions", "System.Collections.ObjectModel.ObservableCollection`1<Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition>");
                xamlMember.Getter = get_12_ChartSeries_LabelDefinitions;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition.Binding":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Binding", "Telerik.UI.Xaml.Controls.Chart.DataPointBinding");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_ChartSeriesLabelDefinition_Binding;
                xamlMember.Setter = set_13_ChartSeriesLabelDefinition_Binding;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition.Format":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Format", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_ChartSeriesLabelDefinition_Format;
                xamlMember.Setter = set_14_ChartSeriesLabelDefinition_Format;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition.Margin":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Margin", "Windows.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_ChartSeriesLabelDefinition_Margin;
                xamlMember.Setter = set_15_ChartSeriesLabelDefinition_Margin;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition.HorizontalAlignment":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "HorizontalAlignment", "Windows.UI.Xaml.HorizontalAlignment");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_ChartSeriesLabelDefinition_HorizontalAlignment;
                xamlMember.Setter = set_16_ChartSeriesLabelDefinition_HorizontalAlignment;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition.VerticalAlignment":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "VerticalAlignment", "Windows.UI.Xaml.VerticalAlignment");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_ChartSeriesLabelDefinition_VerticalAlignment;
                xamlMember.Setter = set_17_ChartSeriesLabelDefinition_VerticalAlignment;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition.Template":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Template", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_ChartSeriesLabelDefinition_Template;
                xamlMember.Setter = set_18_ChartSeriesLabelDefinition_Template;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition.TemplateSelector":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "TemplateSelector", "Windows.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_ChartSeriesLabelDefinition_TemplateSelector;
                xamlMember.Setter = set_19_ChartSeriesLabelDefinition_TemplateSelector;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition.DefaultVisualStyle":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "DefaultVisualStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_ChartSeriesLabelDefinition_DefaultVisualStyle;
                xamlMember.Setter = set_20_ChartSeriesLabelDefinition_DefaultVisualStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition.Strategy":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelDefinition");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Strategy", "Telerik.UI.Xaml.Controls.Chart.ChartSeriesLabelStrategy");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_ChartSeriesLabelDefinition_Strategy;
                xamlMember.Setter = set_21_ChartSeriesLabelDefinition_Strategy;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.IsSelectedBinding":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "IsSelectedBinding", "Telerik.UI.Xaml.Controls.Chart.DataPointBinding");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_ChartSeries_IsSelectedBinding;
                xamlMember.Setter = set_22_ChartSeries_IsSelectedBinding;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.ShowLabels":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "ShowLabels", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_ChartSeries_ShowLabels;
                xamlMember.Setter = set_23_ChartSeries_ShowLabels;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.DisplayName":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "DisplayName", "String");
                xamlMember.Getter = get_24_ChartSeries_DisplayName;
                xamlMember.Setter = set_24_ChartSeries_DisplayName;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.ClipToPlotArea":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "ClipToPlotArea", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_ChartSeries_ClipToPlotArea;
                xamlMember.Setter = set_25_ChartSeries_ClipToPlotArea;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.ItemsSource":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "ItemsSource", "System.Collections.IEnumerable");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_ChartSeries_ItemsSource;
                xamlMember.Setter = set_26_ChartSeries_ItemsSource;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartSeries.ActualPaletteIndex":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartSeries");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "ActualPaletteIndex", "Int32");
                xamlMember.Getter = get_27_ChartSeries_ActualPaletteIndex;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter.ZIndex":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "ZIndex", "Int32");
                xamlMember.Getter = get_28_ChartElementPresenter_ZIndex;
                xamlMember.Setter = set_28_ChartElementPresenter_ZIndex;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter.Chart":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartElementPresenter");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Chart", "Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember.Getter = get_29_ChartElementPresenter_Chart;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.RadControl.CurrentVisualState":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadControl");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "CurrentVisualState", "String");
                xamlMember.Getter = get_30_RadControl_CurrentVisualState;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadCartesianChart.HorizontalAxis":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadCartesianChart");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "HorizontalAxis", "Telerik.UI.Xaml.Controls.Chart.CartesianAxis");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_RadCartesianChart_HorizontalAxis;
                xamlMember.Setter = set_31_RadCartesianChart_HorizontalAxis;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadCartesianChart.VerticalAxis":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadCartesianChart");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "VerticalAxis", "Telerik.UI.Xaml.Controls.Chart.CartesianAxis");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_RadCartesianChart_VerticalAxis;
                xamlMember.Setter = set_32_RadCartesianChart_VerticalAxis;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadCartesianChart.Indicators":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadCartesianChart");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Indicators", "Telerik.UI.Xaml.Controls.Chart.IndicatorCollection");
                xamlMember.Getter = get_33_RadCartesianChart_Indicators;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.IndicatorBase.DataPoints":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.IndicatorBase");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "DataPoints", "Telerik.Charting.DataPointCollection`1<Telerik.Charting.CategoricalDataPoint>");
                xamlMember.Getter = get_34_IndicatorBase_DataPoints;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Charting.CategoricalDataPoint.Value":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Charting.CategoricalDataPoint");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Value", "Double");
                xamlMember.Getter = get_35_CategoricalDataPoint_Value;
                xamlMember.Setter = set_35_CategoricalDataPoint_Value;
                break;
            case "Telerik.Charting.CategoricalDataPointBase.Category":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Charting.CategoricalDataPointBase");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Category", "Object");
                xamlMember.Getter = get_36_CategoricalDataPointBase_Category;
                xamlMember.Setter = set_36_CategoricalDataPointBase_Category;
                break;
            case "Telerik.Charting.DataPoint.Label":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Charting.DataPoint");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Label", "Object");
                xamlMember.Getter = get_37_DataPoint_Label;
                xamlMember.Setter = set_37_DataPoint_Label;
                break;
            case "Telerik.Charting.DataPoint.DataItem":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Charting.DataPoint");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "DataItem", "Object");
                xamlMember.Getter = get_38_DataPoint_DataItem;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Charting.DataPoint.IsSelected":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Charting.DataPoint");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.Getter = get_39_DataPoint_IsSelected;
                xamlMember.Setter = set_39_DataPoint_IsSelected;
                break;
            case "Telerik.Core.Node.Presenter":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Core.Node");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Presenter", "Telerik.Core.IElementPresenter");
                xamlMember.Getter = get_40_Node_Presenter;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Core.Node.IsArrangeValid":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Core.Node");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "IsArrangeValid", "Boolean");
                xamlMember.Getter = get_41_Node_IsArrangeValid;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Core.Node.NodeState":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Core.Node");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "NodeState", "Telerik.Core.NodeState");
                xamlMember.Getter = get_42_Node_NodeState;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Core.Node.Index":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Core.Node");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Index", "Int32");
                xamlMember.Getter = get_43_Node_Index;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Core.Node.CollectionIndex":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Core.Node");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "CollectionIndex", "Int32");
                xamlMember.Getter = get_44_Node_CollectionIndex;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Core.Node.IsTreeLoaded":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Core.Node");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "IsTreeLoaded", "Boolean");
                xamlMember.Getter = get_45_Node_IsTreeLoaded;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Core.Node.LayoutSlot":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Core.Node");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "LayoutSlot", "Telerik.Core.RadRect");
                xamlMember.Getter = get_46_Node_LayoutSlot;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.Core.Node.Parent":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.Core.Node");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Parent", "Telerik.Core.Element");
                xamlMember.Getter = get_47_Node_Parent;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.IndicatorBase.CategoryBinding":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.IndicatorBase");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "CategoryBinding", "Telerik.UI.Xaml.Controls.Chart.DataPointBinding");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_48_IndicatorBase_CategoryBinding;
                xamlMember.Setter = set_48_IndicatorBase_CategoryBinding;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadCartesianChart.Annotations":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadCartesianChart");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Annotations", "Telerik.UI.Xaml.Controls.Chart.CartesianAnnotationCollection");
                xamlMember.Getter = get_49_RadCartesianChart_Annotations;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotation.ClipToPlotArea":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotation");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "ClipToPlotArea", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_50_ChartAnnotation_ClipToPlotArea;
                xamlMember.Setter = set_50_ChartAnnotation_ClipToPlotArea;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadCartesianChart.Grid":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadCartesianChart");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Grid", "Telerik.UI.Xaml.Controls.Chart.CartesianChartGrid");
                xamlMember.Getter = get_51_RadCartesianChart_Grid;
                xamlMember.Setter = set_51_RadCartesianChart_Grid;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.SeriesProvider":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "SeriesProvider", "Telerik.UI.Xaml.Controls.Chart.ChartSeriesProvider");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_52_RadChartBase_SeriesProvider;
                xamlMember.Setter = set_52_RadChartBase_SeriesProvider;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.ClipToBounds":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "ClipToBounds", "Boolean");
                xamlMember.Getter = get_53_RadChartBase_ClipToBounds;
                xamlMember.Setter = set_53_RadChartBase_ClipToBounds;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.EmptyContent":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "EmptyContent", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_54_RadChartBase_EmptyContent;
                xamlMember.Setter = set_54_RadChartBase_EmptyContent;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.EmptyContentTemplate":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "EmptyContentTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_55_RadChartBase_EmptyContentTemplate;
                xamlMember.Setter = set_55_RadChartBase_EmptyContentTemplate;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.PlotAreaStyle":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "PlotAreaStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_56_RadChartBase_PlotAreaStyle;
                xamlMember.Setter = set_56_RadChartBase_PlotAreaStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.Palette":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Palette", "Telerik.UI.Xaml.Controls.Chart.ChartPalette");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_57_RadChartBase_Palette;
                xamlMember.Setter = set_57_RadChartBase_Palette;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.PaletteName":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "PaletteName", "Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_58_RadChartBase_PaletteName;
                xamlMember.Setter = set_58_RadChartBase_PaletteName;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.SelectionPalette":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "SelectionPalette", "Telerik.UI.Xaml.Controls.Chart.ChartPalette");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_59_RadChartBase_SelectionPalette;
                xamlMember.Setter = set_59_RadChartBase_SelectionPalette;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.SelectionPaletteName":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "SelectionPaletteName", "Telerik.UI.Xaml.Controls.Chart.PredefinedPaletteName");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_60_RadChartBase_SelectionPaletteName;
                xamlMember.Setter = set_60_RadChartBase_SelectionPaletteName;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.Behaviors":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Behaviors", "Telerik.UI.Xaml.Controls.Chart.ChartBehaviorCollection");
                xamlMember.Getter = get_61_RadChartBase_Behaviors;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartBehavior.Chart":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartBehavior");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Chart", "Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember.Getter = get_62_ChartBehavior_Chart;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.Zoom":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Zoom", "Windows.Foundation.Size");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_63_RadChartBase_Zoom;
                xamlMember.Setter = set_63_RadChartBase_Zoom;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.MaxZoom":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "MaxZoom", "Windows.Foundation.Size");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_64_RadChartBase_MaxZoom;
                xamlMember.Setter = set_64_RadChartBase_MaxZoom;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.MinZoom":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "MinZoom", "Windows.Foundation.Size");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_65_RadChartBase_MinZoom;
                xamlMember.Setter = set_65_RadChartBase_MinZoom;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.PlotOrigin":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "PlotOrigin", "Windows.Foundation.Point");
                xamlMember.Getter = get_66_RadChartBase_PlotOrigin;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.PlotAreaClip":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "PlotAreaClip", "Telerik.Core.RadRect");
                xamlMember.Getter = get_67_RadChartBase_PlotAreaClip;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.RadChartBase.ScrollOffset":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.RadChartBase");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "ScrollOffset", "Windows.Foundation.Point");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_68_RadChartBase_ScrollOffset;
                xamlMember.Setter = set_68_RadChartBase_ScrollOffset;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CategoricalAxis.AutoGroup":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalAxis");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "AutoGroup", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_69_CategoricalAxis_AutoGroup;
                xamlMember.Setter = set_69_CategoricalAxis_AutoGroup;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CategoricalAxis.MajorTickInterval":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalAxis");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "MajorTickInterval", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_70_CategoricalAxis_MajorTickInterval;
                xamlMember.Setter = set_70_CategoricalAxis_MajorTickInterval;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CategoricalAxis.PlotMode":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalAxis");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "PlotMode", "Telerik.Charting.AxisPlotMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_71_CategoricalAxis_PlotMode;
                xamlMember.Setter = set_71_CategoricalAxis_PlotMode;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CategoricalAxis.GapLength":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalAxis");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "GapLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_72_CategoricalAxis_GapLength;
                xamlMember.Setter = set_72_CategoricalAxis_GapLength;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CartesianAxis.HorizontalLocation":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CartesianAxis");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "HorizontalLocation", "Telerik.Charting.AxisHorizontalLocation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_73_CartesianAxis_HorizontalLocation;
                xamlMember.Setter = set_73_CartesianAxis_HorizontalLocation;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CartesianAxis.VerticalLocation":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CartesianAxis");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "VerticalLocation", "Telerik.Charting.AxisVerticalLocation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_74_CartesianAxis_VerticalLocation;
                xamlMember.Setter = set_74_CartesianAxis_VerticalLocation;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.LineAxis.IsInverse":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.LineAxis");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "IsInverse", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_75_LineAxis_IsInverse;
                xamlMember.Setter = set_75_LineAxis_IsInverse;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.LabelFormatter":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "LabelFormatter", "Telerik.Charting.IContentFormatter");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_76_Axis_LabelFormatter;
                xamlMember.Setter = set_76_Axis_LabelFormatter;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.LabelRotationAngle":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "LabelRotationAngle", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_77_Axis_LabelRotationAngle;
                xamlMember.Setter = set_77_Axis_LabelRotationAngle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.LineStyle":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "LineStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_78_Axis_LineStyle;
                xamlMember.Setter = set_78_Axis_LineStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.LastLabelVisibility":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "LastLabelVisibility", "Telerik.Charting.AxisLastLabelVisibility");
                xamlMember.Getter = get_79_Axis_LastLabelVisibility;
                xamlMember.Setter = set_79_Axis_LastLabelVisibility;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.LabelFormat":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "LabelFormat", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_80_Axis_LabelFormat;
                xamlMember.Setter = set_80_Axis_LabelFormat;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.MajorTickOffset":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "MajorTickOffset", "Int32");
                xamlMember.Getter = get_81_Axis_MajorTickOffset;
                xamlMember.Setter = set_81_Axis_MajorTickOffset;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.LabelOffset":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "LabelOffset", "Int32");
                xamlMember.Getter = get_82_Axis_LabelOffset;
                xamlMember.Setter = set_82_Axis_LabelOffset;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.ShowLabels":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "ShowLabels", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_83_Axis_ShowLabels;
                xamlMember.Setter = set_83_Axis_ShowLabels;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.LabelFitMode":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "LabelFitMode", "Telerik.Charting.AxisLabelFitMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_84_Axis_LabelFitMode;
                xamlMember.Setter = set_84_Axis_LabelFitMode;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.Title":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Title", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_85_Axis_Title;
                xamlMember.Setter = set_85_Axis_Title;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.LabelTemplate":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "LabelTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_86_Axis_LabelTemplate;
                xamlMember.Setter = set_86_Axis_LabelTemplate;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.LabelTemplateSelector":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "LabelTemplateSelector", "Windows.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_87_Axis_LabelTemplateSelector;
                xamlMember.Setter = set_87_Axis_LabelTemplateSelector;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.LabelStyle":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "LabelStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_88_Axis_LabelStyle;
                xamlMember.Setter = set_88_Axis_LabelStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.TitleTemplate":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "TitleTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_89_Axis_TitleTemplate;
                xamlMember.Setter = set_89_Axis_TitleTemplate;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.MajorTickTemplate":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "MajorTickTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_90_Axis_MajorTickTemplate;
                xamlMember.Setter = set_90_Axis_MajorTickTemplate;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.MajorTickStyle":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "MajorTickStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_91_Axis_MajorTickStyle;
                xamlMember.Setter = set_91_Axis_MajorTickStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.TickThickness":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "TickThickness", "Double");
                xamlMember.Getter = get_92_Axis_TickThickness;
                xamlMember.Setter = set_92_Axis_TickThickness;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.Axis.LabelInterval":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.Axis");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "LabelInterval", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_93_Axis_LabelInterval;
                xamlMember.Setter = set_93_Axis_LabelInterval;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.LinearAxis.MajorStep":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.LinearAxis");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "MajorStep", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_94_LinearAxis_MajorStep;
                xamlMember.Setter = set_94_LinearAxis_MajorStep;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.NumericalAxis.Minimum":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.NumericalAxis");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Minimum", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_95_NumericalAxis_Minimum;
                xamlMember.Setter = set_95_NumericalAxis_Minimum;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.NumericalAxis.Maximum":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.NumericalAxis");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Maximum", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_96_NumericalAxis_Maximum;
                xamlMember.Setter = set_96_NumericalAxis_Maximum;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.NumericalAxis.RangeExtendDirection":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.NumericalAxis");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "RangeExtendDirection", "Telerik.Charting.NumericalAxisRangeExtendDirection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_97_NumericalAxis_RangeExtendDirection;
                xamlMember.Setter = set_97_NumericalAxis_RangeExtendDirection;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.NumericalAxis.DesiredTickCount":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.NumericalAxis");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "DesiredTickCount", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_98_NumericalAxis_DesiredTickCount;
                xamlMember.Setter = set_98_NumericalAxis_DesiredTickCount;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.NumericalAxis.ActualRange":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.NumericalAxis");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "ActualRange", "Telerik.Core.ValueRange`1<Double>");
                xamlMember.Getter = get_99_NumericalAxis_ActualRange;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase.DataPoints":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "DataPoints", "Telerik.Charting.DataPointCollection`1<Telerik.Charting.CategoricalDataPoint>");
                xamlMember.Getter = get_100_CategoricalSeriesBase_DataPoints;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries.Stroke":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Stroke", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_101_CategoricalStrokedSeries_Stroke;
                xamlMember.Setter = set_101_CategoricalStrokedSeries_Stroke;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries.StrokeThickness":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "StrokeThickness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_102_CategoricalStrokedSeries_StrokeThickness;
                xamlMember.Setter = set_102_CategoricalStrokedSeries_StrokeThickness;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase.CategoryBinding":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "CategoryBinding", "Telerik.UI.Xaml.Controls.Chart.DataPointBinding");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_103_CategoricalSeriesBase_CategoryBinding;
                xamlMember.Setter = set_103_CategoricalSeriesBase_CategoryBinding;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase.ValueBinding":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalSeriesBase");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "ValueBinding", "Telerik.UI.Xaml.Controls.Chart.DataPointBinding");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_104_CategoricalSeriesBase_ValueBinding;
                xamlMember.Setter = set_104_CategoricalSeriesBase_ValueBinding;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries.StrokeDashArray":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "StrokeDashArray", "Windows.UI.Xaml.Media.DoubleCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_105_CategoricalStrokedSeries_StrokeDashArray;
                xamlMember.Setter = set_105_CategoricalStrokedSeries_StrokeDashArray;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries.StrokeLineJoin":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalStrokedSeries");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "StrokeLineJoin", "Windows.UI.Xaml.Media.PenLineJoin");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_106_CategoricalStrokedSeries_StrokeLineJoin;
                xamlMember.Setter = set_106_CategoricalStrokedSeries_StrokeLineJoin;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CategoricalSeries.CombineMode":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalSeries");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "CombineMode", "Telerik.Charting.ChartSeriesCombineMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_107_CategoricalSeries_CombineMode;
                xamlMember.Setter = set_107_CategoricalSeries_CombineMode;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.CategoricalSeries.StackGroupKey":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.CategoricalSeries");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "StackGroupKey", "Object");
                xamlMember.Getter = get_108_CategoricalSeries_StackGroupKey;
                xamlMember.Setter = set_108_CategoricalSeries_StackGroupKey;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PropertyNameDataPointBinding.PropertyName":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PropertyNameDataPointBinding");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "PropertyName", "String");
                xamlMember.Getter = get_109_PropertyNameDataPointBinding_PropertyName;
                xamlMember.Setter = set_109_PropertyNameDataPointBinding_PropertyName;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.Format":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Format", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_110_ChartAnnotationLabelDefinition_Format;
                xamlMember.Setter = set_110_ChartAnnotationLabelDefinition_Format;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.Template":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Template", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_111_ChartAnnotationLabelDefinition_Template;
                xamlMember.Setter = set_111_ChartAnnotationLabelDefinition_Template;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.DefaultVisualStyle":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "DefaultVisualStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_112_ChartAnnotationLabelDefinition_DefaultVisualStyle;
                xamlMember.Setter = set_112_ChartAnnotationLabelDefinition_DefaultVisualStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.Location":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Location", "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_113_ChartAnnotationLabelDefinition_Location;
                xamlMember.Setter = set_113_ChartAnnotationLabelDefinition_Location;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.HorizontalAlignment":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "HorizontalAlignment", "Windows.UI.Xaml.HorizontalAlignment");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_114_ChartAnnotationLabelDefinition_HorizontalAlignment;
                xamlMember.Setter = set_114_ChartAnnotationLabelDefinition_HorizontalAlignment;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.VerticalAlignment":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "VerticalAlignment", "Windows.UI.Xaml.VerticalAlignment");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_115_ChartAnnotationLabelDefinition_VerticalAlignment;
                xamlMember.Setter = set_115_ChartAnnotationLabelDefinition_VerticalAlignment;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.HorizontalOffset":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "HorizontalOffset", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_116_ChartAnnotationLabelDefinition_HorizontalOffset;
                xamlMember.Setter = set_116_ChartAnnotationLabelDefinition_HorizontalOffset;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.VerticalOffset":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "VerticalOffset", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_117_ChartAnnotationLabelDefinition_VerticalOffset;
                xamlMember.Setter = set_117_ChartAnnotationLabelDefinition_VerticalOffset;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartPalette.Name":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartPalette");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_118_ChartPalette_Name;
                xamlMember.Setter = set_118_ChartPalette_Name;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartPalette.FillEntries":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartPalette");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "FillEntries", "Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection");
                xamlMember.Getter = get_119_ChartPalette_FillEntries;
                xamlMember.Setter = set_119_ChartPalette_FillEntries;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection.Brushes":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Brushes", "System.Collections.Generic.List`1<Windows.UI.Xaml.Media.Brush>");
                xamlMember.Getter = get_120_PaletteEntryCollection_Brushes;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartPalette.SpecialFillEntries":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartPalette");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "SpecialFillEntries", "Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection");
                xamlMember.Getter = get_121_ChartPalette_SpecialFillEntries;
                xamlMember.Setter = set_121_ChartPalette_SpecialFillEntries;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartPalette.StrokeEntries":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartPalette");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "StrokeEntries", "Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection");
                xamlMember.Getter = get_122_ChartPalette_StrokeEntries;
                xamlMember.Setter = set_122_ChartPalette_StrokeEntries;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartPalette.SpecialStrokeEntries":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartPalette");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "SpecialStrokeEntries", "Telerik.UI.Xaml.Controls.Chart.PaletteEntryCollection");
                xamlMember.Getter = get_123_ChartPalette_SpecialStrokeEntries;
                xamlMember.Setter = set_123_ChartPalette_SpecialStrokeEntries;
                break;
            case "Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase.Orientation":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Orientation", "Windows.UI.Xaml.Controls.Orientation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_124_HexLayoutDefinitionBase_Orientation;
                xamlMember.Setter = set_124_HexLayoutDefinitionBase_Orientation;
                break;
            case "Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase.ItemLength":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "ItemLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_125_HexLayoutDefinitionBase_ItemLength;
                xamlMember.Setter = set_125_HexLayoutDefinitionBase_ItemLength;
                break;
            case "Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase.ItemsSpacing":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "ItemsSpacing", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_126_HexLayoutDefinitionBase_ItemsSpacing;
                xamlMember.Setter = set_126_HexLayoutDefinitionBase_ItemsSpacing;
                break;
            case "Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase.ViewPortExtension":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Data.HexView.HexLayoutDefinitionBase");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "ViewPortExtension", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_127_HexLayoutDefinitionBase_ViewPortExtension;
                xamlMember.Setter = set_127_HexLayoutDefinitionBase_ViewPortExtension;
                break;
            case "Telerik.UI.Xaml.Controls.Input.HighlightStyle.FontFamily":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.HighlightStyle");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "FontFamily", "Windows.UI.Xaml.Media.FontFamily");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_128_HighlightStyle_FontFamily;
                xamlMember.Setter = set_128_HighlightStyle_FontFamily;
                break;
            case "Telerik.UI.Xaml.Controls.Input.HighlightStyle.FontWeight":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.HighlightStyle");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "FontWeight", "Telerik.UI.Xaml.Controls.Input.FontWeightName");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_129_HighlightStyle_FontWeight;
                xamlMember.Setter = set_129_HighlightStyle_FontWeight;
                break;
            case "Telerik.UI.Xaml.Controls.Input.HighlightStyle.FontStyle":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.HighlightStyle");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "FontStyle", "Windows.UI.Text.FontStyle");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_130_HighlightStyle_FontStyle;
                xamlMember.Setter = set_130_HighlightStyle_FontStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Input.HighlightStyle.Foreground":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.HighlightStyle");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Foreground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_131_HighlightStyle_Foreground;
                xamlMember.Setter = set_131_HighlightStyle_Foreground;
                break;
            case "Telerik.UI.Xaml.Controls.Input.HighlightStyle.FontSize":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.HighlightStyle");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "FontSize", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_132_HighlightStyle_FontSize;
                xamlMember.Setter = set_132_HighlightStyle_FontSize;
                break;
            case "Telerik.UI.Xaml.Controls.Input.CalendarCellStyle.ContentStyle":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.CalendarCellStyle");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "ContentStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_133_CalendarCellStyle_ContentStyle;
                xamlMember.Setter = set_133_CalendarCellStyle_ContentStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Input.CalendarCellStyle.DecorationStyle":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.CalendarCellStyle");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "DecorationStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_134_CalendarCellStyle_DecorationStyle;
                xamlMember.Setter = set_134_CalendarCellStyle_DecorationStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Primitives.BusyIndicator.BusyIndicatorAnimationAdapter.Animation":
                userType = (global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Primitives.BusyIndicator.BusyIndicatorAnimationAdapter");
                xamlMember = new global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlMember(this, "Animation", "Windows.UI.Xaml.Media.Animation.Storyboard");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_135_BusyIndicatorAnimationAdapter_Animation;
                xamlMember.Setter = set_135_BusyIndicatorAnimationAdapter_Animation;
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlSystemBaseType
    {
        global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::WifiThermometer.WifiThermometer_WindowsPhone_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


